globalvar define temp_count;
globalvar define server_stress_time;
globalvar define scrim_mode_state;
globalvar define scrim_mode;
globalvar define healee;
globalvar define healer;
globalvar define amount;
playervar define effect_scale;
playervar define health_reference;
playervar define armor_reference;
playervar define damage_var;
playervar define damage_taken;
playervar define move_modify;
playervar define role;
playervar define dam_modify;
playervar define player_hero;
playervar define healing_recieved;
playervar define array_sum_temp;
playervar define hero_list;
playervar define booped;
playervar define interact_button;
playervar define damage_float;
playervar define nano_check;
playervar define anti_nade_check;
playervar define anti_nade_effect;
playervar define is_asleep;
playervar define ana_healing_nade_healing;
playervar define brig_hud_ref;
playervar define brig_ult;
playervar define brig_ult_ref;
playervar define brig_ult_armor_ref;
playervar define brig_ult_armor_amount;
playervar define ult_charge;
playervar define ult_charge_max;
playervar define armor_pack_ref;
playervar define moira_resource;
playervar define zarya_shield_cooldown_1;
playervar define zarya_shield_cooldown_2;
playervar define healing_dealt;
playervar define zarya_hud_ref;
playervar define zen_discord_hud_ref;
playervar define time_since_damage;
playervar define time_since_damage_shield;
playervar define max_shield_health;
playervar define current_shield_health;
playervar define DiscordTarget;
playervar define discord_timer;
playervar define zen_discord_reference;
playervar define Discorder;
playervar define temp_player;
playervar define temp_player_0;
playervar define temp_player_1;
playervar define temp_player_2;
playervar define temp_player_3;
playervar define temp_player_4;
playervar define temp_player_5;
playervar define temp_player_6;
playervar define temp_player_7;
playervar define temp_team_hero;
playervar define temp_team_hero_0;
playervar define i;
playervar define temp_health;
playervar define heal_amount;
playervar define temp_health_0;
playervar define heal_amount_0;
playervar define temp_damage;
playervar define temp_health_1;
playervar define temp_armor;

rule: "Disable Inspector"
{
    DisableInspectorRecording();
    scrim_mode_state = 0;
    scrim_mode = WorkshopSettingToggle("Scrim Mode", "Active", false, 0);
}

rule: "Anti Crash"
{
    if (ServerLoad() > 240)
    {
        server_stress_time += 1;
    }
    else
    {
        server_stress_time = 0;
    }
    if (server_stress_time == 6)
    {
        SmallMessage(AllPlayers(Team.All), "Anti Crash Slow Mode");
        SetSlowMotion(10);
    }
    if (server_stress_time == 0)
    {
        SetSlowMotion(100);
    }
    Wait(0.5, WaitBehavior.IgnoreCondition);
    Loop();
}

rule: "Has Spawned Setup"
Event.OngoingPlayer
if (HasSpawned(EventPlayer()) == true)
{
    DestroyHudText(zarya_hud_ref);
    DestroyHudText(brig_hud_ref);
    DestroyHudText(zen_discord_hud_ref);
    SetAbility1Enabled(EventPlayer(), true);
    SetAbility2Enabled(EventPlayer(), true);
    SetUltimateCharge(EventPlayer(), 0);
    healing_dealt = 100;
    damage_float = 1;
    hero_list = [Hero.Dva, Hero.Reinhardt, Hero.Winston, Hero.Zarya, Hero.Ana, Hero.Brigitte, Hero.Lucio, Hero.Moira, Hero.Zenyatta];
    RemoveAllHealthPoolsFromPlayer(EventPlayer());
    move_modify[0] = 0;
    move_modify[1] = 0;
    move_modify[2] = 0;
    dam_modify[0] = 0;
    dam_modify[1] = 0;
    dam_modify[2] = 0;
    dam_modify[3] = 0;
    ult_charge = 0;
    SetHealingReceived(EventPlayer(), 100);
    healing_recieved = 1;
    brig_ult_armor_amount = 0;
    brig_ult = 0;
    SetUltimateAbilityEnabled(EventPlayer(), true);
    DestroyEffect(brig_ult_ref);
    SetMaxHealth(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 100);
    SetDamageReceived(EventPlayer(), 100);
    RemoveAllHealthPoolsFromPlayer(EventPlayer());
    RemoveHealthPoolFromPlayer(brig_ult_armor_ref);
    player_hero = HeroOf(EventPlayer());
    MinWait();
    if (HeroOf(EventPlayer()) == Hero.Ana)
    {
        effect_scale = 0.5;
        role = 1;
        ana_healing_nade_healing = 26.667;
        damage_float = 1;
    }
    else if (HeroOf(EventPlayer()) == Hero.Brigitte)
    {
        role = 1;
        effect_scale = 1;
        ult_charge_max = 2550;
        healing_recieved = 1;
        SetHealingReceived(EventPlayer(), 100);
        SetHealingDealt(EventPlayer(), 1);
        SetMaxHealth(EventPlayer(), 50);
        AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 50, true, true);
        health_reference = LastCreatedHealthPool();
        DestroyHudText(brig_hud_ref);
        damage_float = 1;
        healing_dealt = 100;
    }
    else if (HeroOf(EventPlayer()) == Hero.Lucio)
    {
        effect_scale = 0.5;
        role = 1;
        damage_float = 1;
        healing_dealt = 100;
    }
    else if (HeroOf(EventPlayer()) == Hero.Moira)
    {
        effect_scale = 1;
        role = 1;
        moira_resource = 100;
        ult_charge_max = 2390;
        healing_dealt = 115;
        SetHealingDealt(EventPlayer(), 115);
        damage_float = 1;
    }
    else if (HeroOf(EventPlayer()) == Hero.Zenyatta)
    {
        effect_scale = 0.5;
        ult_charge_max = 2310;
        damage_var = 95.833;
        max_shield_health = 150;
        current_shield_health = 150;
        role = 1;
        SetDamageDealt(EventPlayer(), damage_var);
    }
    MinWait();
    if (HeroOf(EventPlayer()) == Hero.Dva)
    {
        role = 0;
        Wait(1, WaitBehavior.IgnoreCondition);
        StartHoldingButton(EventPlayer(), Button.Interact);
        interact_button = 3;
        Wait(0.5, WaitBehavior.IgnoreCondition);
        StopHoldingButton(EventPlayer(), Button.Interact);
        SmallMessage(EventPlayer(), "Forced Reset at spawn to deal with rare health issue. :)");
    }
    else if (HeroOf(EventPlayer()) == Hero.Reinhardt)
    {
        Wait(0.1, WaitBehavior.IgnoreCondition);
        effect_scale = 1;
        role = 0;
        SetMaxHealth(EventPlayer(), 166.667);
        temp_player = EventPlayer();
        temp_player.array_sum_temp = 100;
        temp_count = 0;
        while (temp_count < 2)
        {
            temp_player.array_sum_temp += temp_player.dam_modify[temp_count];
            Wait(0.017, WaitBehavior.IgnoreCondition);
            temp_count += 1;
        }
        temp_player.damage_taken = temp_player.array_sum_temp;
        temp_player.damage_float = temp_player.damage_taken / 100;
        SetDamageReceived(EventPlayer(), damage_taken);
        SetHealingReceived(EventPlayer(), 200);
        damage_float = 2;
        healing_recieved = 2;
    }
    else if (HeroOf(EventPlayer()) == Hero.Winston)
    {
        effect_scale = 1;
        ult_charge_max = 1540;
        role = 0;
        SetMaxHealth(EventPlayer(), 92.308);
        AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 476.92, true, true);
        health_reference = LastCreatedHealthPool();
        AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, 15.39, true, true);
        armor_reference = LastCreatedHealthPool();
        temp_player_0 = EventPlayer();
        temp_player_0.array_sum_temp = 100;
        temp_count = 0;
        while (temp_count < 2)
        {
            temp_player_0.array_sum_temp += temp_player_0.dam_modify[temp_count];
            Wait(0.017, WaitBehavior.IgnoreCondition);
            temp_count += 1;
        }
        temp_player_0.damage_taken = temp_player_0.array_sum_temp;
        temp_player_0.damage_float = temp_player_0.damage_taken / 100;
        SetDamageReceived(EventPlayer(), damage_taken);
        healing_recieved = 2;
        damage_float = 2;
    }
    else if (HeroOf(EventPlayer()) == Hero.Zarya)
    {
        effect_scale = 1;
        max_shield_health = 200;
        ult_charge_max = 2100;
        current_shield_health = 200;
        zarya_shield_cooldown_1 = 0;
        zarya_shield_cooldown_2 = 0;
        role = 0;
        healing_recieved = 2;
        SetHealingReceived(EventPlayer(), 200);
        AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 150, true, true);
        AddHealthPoolToPlayer(EventPlayer(), HealthType.Shields, 175, true, true);
        temp_player_1 = EventPlayer();
        temp_player_1.array_sum_temp = 100;
        temp_count = 0;
        while (temp_count < 2)
        {
            temp_player_1.array_sum_temp += temp_player_1.dam_modify[temp_count];
            Wait(0.017, WaitBehavior.IgnoreCondition);
            temp_count += 1;
        }
        temp_player_1.damage_taken = temp_player_1.array_sum_temp;
        temp_player_1.damage_float = temp_player_1.damage_taken / 100;
        SetDamageReceived(EventPlayer(), damage_taken);
        damage_float = 2;
        CreateHudText(EventPlayer(), null, null, <"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    <0>                                                                    <1>             <2>", "", <"<0><1>", "", RoundToInteger(zarya_shield_cooldown_1, Rounding.Up)>, RoundToInteger(zarya_shield_cooldown_2, Rounding.Up)>, Location.Left, 1, Color.White, Color.Black, Color.White, HudTextRev.String, Spectators.VisibleNever);
        zarya_hud_ref = LastTextID();
    }
    SmallMessage(EventPlayer(), "Patch Version: 2.0.12 6/8/2023");
}

rule: "Remove Effects On Death"
Event.OnDeath
{
    DestroyEffect(anti_nade_effect);
    DestroyEffect(ana_healing_nade_healing);
    DestroyEffect(brig_ult_ref);
    brig_ult = 0;
    DestroyEffect(zen_discord_reference);
    Discorder.discord_timer = 3;
    discord_timer = 3;
    dam_modify[0] = 0;
    temp_player_2 = EventPlayer();
    temp_player_2.array_sum_temp = 100;
    temp_count = 0;
    while (temp_count < 2)
    {
        temp_player_2.array_sum_temp += temp_player_2.dam_modify[temp_count];
        Wait(0.017, WaitBehavior.IgnoreCondition);
        temp_count += 1;
    }
    temp_player_2.damage_taken = temp_player_2.array_sum_temp;
    temp_player_2.damage_float = temp_player_2.damage_taken / 100;
    SetDamageReceived(EventPlayer(), damage_taken);
    DestroyEffect(zen_discord_reference);
    Wait(1, WaitBehavior.IgnoreCondition);
    Discorder.DiscordTarget = null;
}

rule: "Increased Knockback"
Event.OngoingPlayer
if (booped == 1)
if (role == 0)
{
    Wait(0.05, WaitBehavior.IgnoreCondition);
    ApplyImpulse(EventPlayer(), DirectionTowards(PositionOf(EventPlayer()), PositionOf(EventPlayer()) + VelocityOf(EventPlayer()) * Vector(1, [], 1)), SpeedOf(EventPlayer()) * 0.5, Relative.ToWorld, ContraryMotion.Incorporate);
    booped = 0;
}

rule: "Check For Hero Swap"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) != player_hero)
if (HeroOf(EventPlayer()) != Hero.Soldier76)
{
    DestroyHudText(zarya_hud_ref);
    DestroyHudText(brig_hud_ref);
    DestroyHudText(zen_discord_hud_ref);
    SetAbility1Enabled(EventPlayer(), true);
    SetAbility2Enabled(EventPlayer(), true);
    SetUltimateCharge(EventPlayer(), 0);
    healing_dealt = 100;
    damage_float = 1;
    hero_list = [Hero.Dva, Hero.Reinhardt, Hero.Winston, Hero.Zarya, Hero.Ana, Hero.Brigitte, Hero.Lucio, Hero.Moira, Hero.Zenyatta];
    RemoveAllHealthPoolsFromPlayer(EventPlayer());
    move_modify[0] = 0;
    move_modify[1] = 0;
    move_modify[2] = 0;
    dam_modify[0] = 0;
    dam_modify[1] = 0;
    dam_modify[2] = 0;
    dam_modify[3] = 0;
    ult_charge = 0;
    SetHealingReceived(EventPlayer(), 100);
    healing_recieved = 1;
    brig_ult_armor_amount = 0;
    brig_ult = 0;
    SetUltimateAbilityEnabled(EventPlayer(), true);
    DestroyEffect(brig_ult_ref);
    SetMaxHealth(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 100);
    SetDamageReceived(EventPlayer(), 100);
    RemoveAllHealthPoolsFromPlayer(EventPlayer());
    RemoveHealthPoolFromPlayer(brig_ult_armor_ref);
    player_hero = HeroOf(EventPlayer());
    MinWait();
    if (HeroOf(EventPlayer()) == Hero.Ana)
    {
        effect_scale = 0.5;
        role = 1;
        ana_healing_nade_healing = 26.667;
        damage_float = 1;
    }
    else if (HeroOf(EventPlayer()) == Hero.Brigitte)
    {
        role = 1;
        effect_scale = 1;
        ult_charge_max = 2550;
        healing_recieved = 1;
        SetHealingReceived(EventPlayer(), 100);
        SetHealingDealt(EventPlayer(), 1);
        SetMaxHealth(EventPlayer(), 50);
        AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 50, true, true);
        health_reference = LastCreatedHealthPool();
        DestroyHudText(brig_hud_ref);
        damage_float = 1;
        healing_dealt = 100;
    }
    else if (HeroOf(EventPlayer()) == Hero.Lucio)
    {
        effect_scale = 0.5;
        role = 1;
        damage_float = 1;
        healing_dealt = 100;
    }
    else if (HeroOf(EventPlayer()) == Hero.Moira)
    {
        effect_scale = 1;
        role = 1;
        moira_resource = 100;
        ult_charge_max = 2390;
        healing_dealt = 115;
        SetHealingDealt(EventPlayer(), 115);
        damage_float = 1;
    }
    else if (HeroOf(EventPlayer()) == Hero.Zenyatta)
    {
        effect_scale = 0.5;
        ult_charge_max = 2310;
        damage_var = 95.833;
        max_shield_health = 150;
        current_shield_health = 150;
        role = 1;
        CreateHudText(AllPlayers(),"{0} {1}".Format([HealthOfType(EventPlayer(),HealthType.Health),HealthOfType(EventPlayer(),HealthType.Armor)]),null,null,Location.Left,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.DefaultVisibility);
        SetDamageDealt(EventPlayer(), damage_var);
    }
    MinWait();
    if (HeroOf(EventPlayer()) == Hero.Dva)
    {
        role = 0;
        Wait(1, WaitBehavior.IgnoreCondition);
        StartHoldingButton(EventPlayer(), Button.Interact);
        interact_button = 3;
        Wait(0.5, WaitBehavior.IgnoreCondition);
        StopHoldingButton(EventPlayer(), Button.Interact);
        SmallMessage(EventPlayer(), "Forced Reset at spawn to deal with rare health issue. :)");
    }
    else if (HeroOf(EventPlayer()) == Hero.Reinhardt)
    {
        Wait(0.1, WaitBehavior.IgnoreCondition);
        effect_scale = 1;
        role = 0;
        SetMaxHealth(EventPlayer(), 166.667);
        temp_player_3 = EventPlayer();
        temp_player_3.array_sum_temp = 100;
        temp_count = 0;
        while (temp_count < 2)
        {
            temp_player_3.array_sum_temp += temp_player_3.dam_modify[temp_count];
            Wait(0.017, WaitBehavior.IgnoreCondition);
            temp_count += 1;
        }
        temp_player_3.damage_taken = temp_player_3.array_sum_temp;
        temp_player_3.damage_float = temp_player_3.damage_taken / 100;
        SetDamageReceived(EventPlayer(), damage_taken);
        SetHealingReceived(EventPlayer(), 200);
        damage_float = 2;
        healing_recieved = 2;
    }
    else if (HeroOf(EventPlayer()) == Hero.Winston)
    {
        effect_scale = 1;
        ult_charge_max = 1540;
        role = 0;
        SetMaxHealth(EventPlayer(), 92.308);
        AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 476.92, true, true);
        health_reference = LastCreatedHealthPool();
        AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, 15.39, true, true);
        armor_reference = LastCreatedHealthPool();
        temp_player_4 = EventPlayer();
        temp_player_4.array_sum_temp = 100;
        temp_count = 0;
        while (temp_count < 2)
        {
            temp_player_4.array_sum_temp += temp_player_4.dam_modify[temp_count];
            Wait(0.017, WaitBehavior.IgnoreCondition);
            temp_count += 1;
        }
        temp_player_4.damage_taken = temp_player_4.array_sum_temp;
        temp_player_4.damage_float = temp_player_4.damage_taken / 100;
        SetDamageReceived(EventPlayer(), damage_taken);
        healing_recieved = 2;
        damage_float = 2;
    }
    else if (HeroOf(EventPlayer()) == Hero.Zarya)
    {
        effect_scale = 1;
        max_shield_health = 200;
        ult_charge_max = 2100;
        current_shield_health = 200;
        zarya_shield_cooldown_1 = 0;
        zarya_shield_cooldown_2 = 0;
        role = 0;
        healing_recieved = 2;
        SetHealingReceived(EventPlayer(), 200);
        AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 150, true, true);
        AddHealthPoolToPlayer(EventPlayer(), HealthType.Shields, 175, true, true);
        temp_player_5 = EventPlayer();
        temp_player_5.array_sum_temp = 100;
        temp_count = 0;
        while (temp_count < 2)
        {
            temp_player_5.array_sum_temp += temp_player_5.dam_modify[temp_count];
            Wait(0.017, WaitBehavior.IgnoreCondition);
            temp_count += 1;
        }
        temp_player_5.damage_taken = temp_player_5.array_sum_temp;
        temp_player_5.damage_float = temp_player_5.damage_taken / 100;
        SetDamageReceived(EventPlayer(), damage_taken);
        damage_float = 2;
        CreateHudText(EventPlayer(), null, null, <"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    <0>                                                                    <1>             <2>", "", <"<0><1>", "", RoundToInteger(zarya_shield_cooldown_1, Rounding.Up)>, RoundToInteger(zarya_shield_cooldown_2, Rounding.Up)>, Location.Left, 1, Color.White, Color.Black, Color.White, HudTextRev.String, Spectators.VisibleNever);
        zarya_hud_ref = LastTextID();
    }
    SmallMessage(EventPlayer(), "Patch Version: 2.0.12 6/8/2023");
}

rule: "Healing Check Default"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) != Hero.Lucio)
{
    if (anti_nade_check == 0)
    {
        SetHealingReceived(EventPlayer(), healing_recieved * 100);
    }
    SetHealingDealt(EventPlayer(), healing_dealt);
    temp_player_6 = EventPlayer();
    temp_player_6.array_sum_temp = 100;
    temp_count = 0;
    while (temp_count < 2)
    {
        temp_player_6.array_sum_temp += temp_player_6.dam_modify[temp_count];
        Wait(0.017, WaitBehavior.IgnoreCondition);
        temp_count += 1;
    }
    temp_player_6.damage_taken = temp_player_6.array_sum_temp;
    temp_player_6.damage_float = temp_player_6.damage_taken / 100;
    SetDamageReceived(EventPlayer(), damage_taken);
    Wait(5, WaitBehavior.IgnoreCondition);
    Loop();
}

rule: "Healing Check Lucio"
Event.OngoingPlayer
Player.Lucio
{
    if (anti_nade_check == 0)
    {
        SetHealingReceived(EventPlayer(), 80);
    }
    SetHealingDealt(EventPlayer(), 100);
    Wait(5, WaitBehavior.IgnoreCondition);
    Loop();
}

rule: "Brig: Ult Charge"
Event.OngoingPlayer
Player.Brigitte
if (IsUsingUltimate(EventPlayer()) == false)
if (IsGameInProgress() == true)
if (!IsBetweenRounds() == true)
{
    if (ult_charge >= ult_charge_max)
    {
        ult_charge = ult_charge_max;
    }
    ult_charge += 0.667;
    Wait(0.2, WaitBehavior.IgnoreCondition);
    SetUltimateCharge(EventPlayer(), Min(99, ult_charge / ult_charge_max * 100));
    Loop();
}

rule: "Ult Charge Raise from Damage"
Event.OnDamageDealt
Player.Brigitte
if (IsUsingUltimate(EventPlayer()) == false)
if (Victim() != Attacker())
{
    ult_charge += EventDamage() / Victim().damage_float;
}

rule: "Ult Charge Raise from Healing"
Event.OnHealingDealt
Player.Brigitte
if (IsUsingUltimate(EventPlayer()) == false)
if (!IsBetweenRounds() == true)
{
    ult_charge += EventHealing() / Healee().healing_recieved;
}

rule: "Reset on Round End"
Event.OngoingPlayer
if (IsBetweenRounds() == true)
{
    ult_charge = 0;
    SetAbility1Enabled(EventPlayer(), true);
    SetAbility2Enabled(EventPlayer(), true);
    DestroyAllEffects();
    brig_ult = false;
    brig_ult_armor_amount = 0;
    Wait(10, WaitBehavior.IgnoreCondition);
    DestroyAllEffects();
    dam_modify[0] = 0;
    temp_player_7 = EventPlayer();
    temp_player_7.array_sum_temp = 100;
    temp_count = 0;
    while (temp_count < 2)
    {
        temp_player_7.array_sum_temp += temp_player_7.dam_modify[temp_count];
        Wait(0.017, WaitBehavior.IgnoreCondition);
        temp_count += 1;
    }
    temp_player_7.damage_taken = temp_player_7.array_sum_temp;
    temp_player_7.damage_float = temp_player_7.damage_taken / 100;
    SetDamageReceived(EventPlayer(), damage_taken);
    SetAbility1Enabled(EventPlayer(), true);
    SetAbility2Enabled(EventPlayer(), true);
    SetJumpEnabled(EventPlayer(), true);
    DestroyAllEffects();
}

void workshopHeal() "Nade-safe heal for workshop purposes"
{
    if (anti_nade_check == 1 && healer == null)
    {
        SetHealingReceived(healee, 100);
        Heal(healee, healer, amount);
        SetHealingReceived(healee, 0);
    }
    else
    {
        Heal(healee, healer, amount);
    }
}

rule: "Remove Support Passive"
Event.OngoingPlayer
if (role == 1)
if (Health(EventPlayer()) < MaxHealth(EventPlayer()))
if (is_asleep == false)
{
    healee = EventPlayer();
    healer = null;
    amount = 0.01;
    workshopHeal();
    Damage(EventPlayer(), null, 0.01);
    Wait(1.46, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

rule: "Comp Check Tank"
Event.OngoingPlayer
if ((HeroOf(EventPlayer()) == Hero.Reinhardt || HeroOf(EventPlayer()) == Hero.Winston) == true)
{
    temp_team_hero = AllPlayers(TeamOf(EventPlayer()));
    temp_count = 0;
    while (temp_count < 6)
    {
        if (temp_team_hero[temp_count] != EventPlayer())
        {
            SetAllowedHeroes(temp_team_hero[temp_count], temp_team_hero[temp_count].hero_list);
        }
        temp_count += 1;
    }
}

rule: "Comp Check Support"
Event.OngoingPlayer
if ((HeroOf(EventPlayer()) == Hero.Ana || HeroOf(EventPlayer()) == Hero.Moira || HeroOf(EventPlayer()) == Hero.Zenyatta) == true)
{
    temp_team_hero_0 = AllPlayers(TeamOf(EventPlayer()));
    temp_count = 0;
    while (temp_count < 6)
    {
        if (temp_team_hero_0[temp_count] != EventPlayer())
        {
            SetAllowedHeroes(temp_team_hero_0[temp_count], temp_team_hero_0[temp_count].hero_list);
        }
        temp_count += 1;
    }
}

rule: "Hold F for 3 seconds"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Interact) == true)
if (IsInSpawnRoom(EventPlayer()) == true)
{
    interact_button += 0.5;
    if (interact_button > 3)
    {
        SetAbility1Enabled(EventPlayer(), true);
        SetAbility2Enabled(EventPlayer(), true);
        if (HeroOf(EventPlayer()) == Hero.Dva && IsInAlternateForm(EventPlayer()) == true)
        {
            ForcePlayerHero(EventPlayer(), Hero.Sojourn);
            StopForcingHero(EventPlayer());
            Wait(0.1, WaitBehavior.IgnoreCondition);
            ForcePlayerHero(EventPlayer(), player_hero);
            StopForcingHero(EventPlayer());
            interact_button = 0;
        }
        else
        {
            ForcePlayerHero(EventPlayer(), Hero.Soldier76);
            StopForcingHero(EventPlayer());
            Wait(0.1, WaitBehavior.IgnoreCondition);
            ForcePlayerHero(EventPlayer(), player_hero);
            StopForcingHero(EventPlayer());
            interact_button = 0;
        }
    }
    if (!IsButtonHeld(EventPlayer(), Button.Interact))
    {
        interact_button = 0;
    }
    Wait(0.5, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

rule: "Ana: Healing Nade"
Event.OnHealingDealt
Player.Ana
if (EventAbility() == Button.Ability2)
{
    Heal(Healee(), Healer(), ana_healing_nade_healing);
}

rule: "Ana Sleep Dart Duration"
Event.OnDamageDealt
Player.Ana
if (EventAbility() == Button.Ability1)
{
    Wait(0.017, WaitBehavior.IgnoreCondition);
    Victim().is_asleep = true;
    Wait(2, WaitBehavior.IgnoreCondition);
    if (Victim().is_asleep == true)
    {
        ClearStatus(Victim(), Status.Asleep);
        SetStatus(Victim(), Attacker(), Status.Asleep, 100);
        Wait(4, WaitBehavior.IgnoreCondition);
        ClearStatus(Victim(), Status.Asleep);
        Victim().is_asleep = false;
    }
}

rule: "Ana: Slept Target gets woken up"
Event.OnDamageTaken
if (is_asleep == true)
{
    is_asleep = false;
}

rule: "Ana: Remove Nano Heal"
Event.OnHealingDealt
Player.Ana
if (EventAbility() == Button.Ultimate)
if (Healee().nano_check == 0)
{
    Healee().nano_check = 1;
    if (Healee().anti_nade_check == 0)
    {
        Damage(Healee(), null, EventHealing());
    }
    Wait(8, WaitBehavior.IgnoreCondition);
    Healee().nano_check = 0;
}

rule: "Brig: Increased Boop Range"
Event.OnDamageDealt
Player.Brigitte
if (EventAbility() == Button.Ability1)
{
    Victim().booped = 1;
}

rule: "Brig: Try and cancel ult"
Event.OngoingPlayer
Player.Brigitte
if (IsButtonHeld(EventPlayer(), Button.Ultimate) == true)
if (UltimateChargePercent(EventPlayer()) >= 99)
if (IsAlive(EventPlayer()) == true)
{
    BigMessage(AllPlayers(OppositeTeamOf(TeamOf(EventPlayer()))), "RAID BOSS INCOMING");
    BigMessage(AllPlayers(TeamOf(EventPlayer())), "RALLY TO ME");
    PlayEffect(AllPlayers(Team.All), PlayEffect.BuffExplosionSound, Color.White, EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 130);
    ult_charge = 0;
    brig_ult = true;
    CreateEffect(AllPlayers(Team.All), Effect.Ring, Color.Yellow, PositionOf(EventPlayer()), 8.5, EffectRev.VisibleToPositionAndRadius);
    brig_ult_ref = LastCreatedEntity();
    Wait(10, WaitBehavior.IgnoreCondition);
    brig_ult = false;
    DestroyEffect(brig_ult_ref);
    SetMoveSpeed(EventPlayer(), 100);
}

rule: "Brig: Ult Armor Gen"
Event.OngoingPlayer
Player.Brigitte
if (brig_ult == true)
{
    time_since_damage = PlayersWithinRadius(PositionOf(EventPlayer()), 10, TeamOf(EventPlayer()), RadiusLOS.SurfacesAndEnemyBarriers);
    ult_charge = 0;
    i = 0;
    while (i < 6)
    {
        time_since_damage[i].brig_ult_armor_amount += 15 * time_since_damage[i].healing_recieved;
        if (time_since_damage[i].brig_ult_armor_amount > 150 * time_since_damage[i].healing_recieved)
        {
            time_since_damage[i].brig_ult_armor_amount = 150 * time_since_damage[i].healing_recieved;
        }
        RemoveHealthPoolFromPlayer(time_since_damage[i].brig_ult_armor_ref);
        AddHealthPoolToPlayer(time_since_damage[i], HealthType.Armor, time_since_damage[i].brig_ult_armor_amount, false, true);
        time_since_damage[i].brig_ult_armor_ref = LastCreatedHealthPool();
        i += 1;
    }
    Wait(0.5, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

rule: "Brig: Damage Teammates during Repair Pack Throw"
Event.OngoingPlayer
Player.Brigitte
if (IsUsingAbility2(EventPlayer()) == true)
{
    Damage(PlayersInViewAngle(EventPlayer(), TeamOf(EventPlayer()), 45), null, 0.01);
    MinWait();
    LoopIfConditionIsTrue();
}

rule: "Brig: Repair Pack Default"
Event.OnHealingDealt
Player.Brigitte
if (EventAbility() == Button.Ability2)
if (HeroOf(Healee()) != Hero.Lucio)
{
    temp_health = MaxHealth(Healee()) - Health(Healee());
    heal_amount = 150;
    heal_amount -= temp_health / Healee().healing_recieved;
    if (temp_health > 150)
    {
        healee = Healee();
        healer = Healer();
        amount = 150;
        workshopHeal();
    }
    else
    {
        healee = Healee();
        healer = Healer();
        amount = temp_health;
        workshopHeal();
    }
    if (heal_amount > 75)
    {
        heal_amount = 75;
    }
    if (heal_amount < 1)
    {
        heal_amount = 0;
    }
    AddHealthPoolToPlayer(Healee(), HealthType.Armor, heal_amount * Healee().healing_recieved, false, true);
    Healee().armor_pack_ref = LastCreatedHealthPool();
    SetAbility2Enabled(EventPlayer(), false);
    Wait(6, WaitBehavior.IgnoreCondition);
    SetAbility2Enabled(EventPlayer(), true);
}

rule: "Brig: Repair Pack Lucio"
Event.OnHealingDealt
Player.Brigitte
if (EventAbility() == Button.Ability2)
if (HeroOf(Healee()) == Hero.Lucio)
{
    temp_health_0 = MaxHealth(Healee()) - Health(Healee());
    heal_amount_0 = 150;
    heal_amount_0 -= temp_health_0;
    if (temp_health_0 > 150)
    {
        healee = Healee();
        healer = Healer();
        amount = 234;
        workshopHeal();
    }
    else
    {
        healee = Healee();
        healer = Healer();
        amount = temp_health_0 / 0.8;
        workshopHeal();
    }
    if (heal_amount_0 > 75)
    {
        heal_amount_0 = 75;
    }
    AddHealthPoolToPlayer(Healee(), HealthType.Armor, heal_amount_0, false, true);
    Healee().armor_pack_ref = LastCreatedHealthPool();
    SetAbility2Enabled(EventPlayer(), false);
    Wait(6, WaitBehavior.IgnoreCondition);
    SetAbility2Enabled(EventPlayer(), true);
}

rule: "Brig: Remove Repair Pack Health"
Event.OngoingPlayer
if (armor_pack_ref != null)
{
    Wait(6, WaitBehavior.IgnoreCondition);
    RemoveHealthPoolFromPlayer(armor_pack_ref);
    armor_pack_ref = null;
}

rule: "Brig: Used Shield Bash"
Event.OngoingPlayer
Player.Brigitte
if (IsFiringSecondary(EventPlayer()) == true)
if (IsFiringPrimary(EventPlayer()) == true)
{
    SetMoveSpeed(EventPlayer(), 50);
    Wait(0.25, WaitBehavior.IgnoreCondition);
    SetMoveSpeed(EventPlayer(), 100);
}


rule: "Brig: Shield Bash Stun"
Event.OnDamageDealt
Player.Brigitte
if (IsFiringSecondary(EventPlayer()) == true)
if (EventAbility() == Button.PrimaryFire)
{
    if (Victim().nano_check == true)
    {
        if (HealthOfType(Victim(), HealthType.Armor) > 1)
        {
            if (EventDamage() > 18 / Victim().damage_float)
            {
                SetStatus(Victim(), Attacker(), Status.Stunned, 0.9);
                SetAbilityCooldown(Attacker(),Button.PrimaryFire,5);
                Wait(5);
            }
        }
        else
        {
            if (EventDamage() > 25 / Victim().damage_float)
            {
                SetStatus(Victim(), Attacker(), Status.Stunned, 0.9);
                SetAbilityCooldown(Attacker(),Button.PrimaryFire,5);
                Wait(5);
            }
        }
    }
    else
    {
        if (HealthOfType(Victim(), HealthType.Armor) > 1)
        {
            if (EventDamage() > 30 / Victim().damage_float)
            {
                SetStatus(Victim(), Attacker(), Status.Stunned, 0.9);
                SetAbilityCooldown(Attacker(),Button.PrimaryFire,5);
                Wait(5);
            }
        }
        else
        {
            if (EventDamage() > 35 / Victim().damage_float)
            {
                SetStatus(Victim(), Attacker(), Status.Stunned, 0.9);
                SetAbilityCooldown(Attacker(),Button.PrimaryFire,5);
                Wait(5);
            }
        }
    }
}

rule: "Brig: Reduce Armor From Damage"
Event.OnDamageTaken
if (brig_ult_armor_amount > 0)
{
    temp_damage = EventDamage();
    temp_damage -= HealthOfType(EventPlayer(), HealthType.Shields);
    brig_ult_armor_amount -= temp_damage;
    if (brig_ult_armor_amount < 0)
    {
        brig_ult_armor_amount = 0;
    }
}

rule: "Brig: Raise Self Healing"
Event.OnHealingTaken
Player.Brigitte
if (Healer() == Healee())
if (EventAbility() != null)
{
    Heal(Healee(), Healer(), EventHealing() * 100);
}

rule: "Reset on Round End"
Event.OngoingPlayer
if (IsBetweenRounds() == true)
{
    ult_charge = 0;
}

rule: "Dva: Increased Dva booster boop range"
Event.OnDamageDealt
Player.Dva
if (EventAbility() == Button.Ability1)
{
    Victim().booped = 1;
}

rule: "Dva: Boosters Damage"
Event.OnDamageDealt
Player.Dva
if (EventAbility() == Button.Ability1)
{
    healee = Victim();
    healer = null;
    amount = 5;
    workshopHeal();
}

rule: "Dva: Reduce Remech Damage"
Event.OngoingPlayer
Player.Dva
if (IsUsingUltimate(EventPlayer()) == true)
if (IsInAlternateForm(EventPlayer()) == true)
{
    RemoveHealthPoolFromPlayer(health_reference);
    SetDamageDealt(EventPlayer(), 20);
    Wait(1, WaitBehavior.IgnoreCondition);
    SetDamageDealt(EventPlayer(), 100);
}

rule: "Dva: Baby Health"
Event.OngoingPlayer
Player.Dva
if (IsInAlternateForm(EventPlayer()) == true)
{
    Discorder.discord_timer = 3;
    RemoveHealthPoolFromPlayer(armor_reference);
    RemoveHealthPoolFromPlayer(health_reference);
    RemoveHealthPoolFromPlayer(brig_ult_armor_ref);
    RemoveHealthPoolFromPlayer(armor_pack_ref);
    brig_ult_armor_amount = 0;
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 51, true, true);
    health_reference = LastCreatedHealthPool();
}

rule: "Dva: Mech Health"
Event.OngoingPlayer
Player.Dva
if (!IsInAlternateForm(EventPlayer()) == true)
{
    Discorder.discord_timer = 3;
    RemoveAllHealthPoolsFromPlayer(EventPlayer());
    Wait(0.033, WaitBehavior.IgnoreCondition);
    SetMaxHealth(EventPlayer(), 66);
    Wait(0.033, WaitBehavior.IgnoreCondition);
    healee = EventPlayer();
    healer = null;
    amount = 1000;
    workshopHeal();
    temp_health_1 = 400 - MaxHealthOfType(EventPlayer(), HealthType.Health);
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, temp_health_1, true, true);
    health_reference = LastCreatedHealthPool();
    if (MaxHealthOfType(EventPlayer(), HealthType.Armor) < 200)
    {
        temp_armor = 200 - MaxHealthOfType(EventPlayer(), HealthType.Armor);
        AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, temp_armor, true, true);
        armor_reference = LastCreatedHealthPool();
    }
}

rule: "Dva: Melee Cancels Boosters"
Event.OngoingPlayer
Player.Dva
if (IsUsingAbility1(EventPlayer()) == true)
if (IsButtonHeld(EventPlayer(), Button.Melee) == true)
{
    PressButton(EventPlayer(), Button.Ability1);
}

rule: "Lucio: Increased Boop Range"
Event.OnDamageDealt
Player.Lucio
if (EventAbility() == Button.SecondaryFire)
{
    Victim().booped = 1;
}

rule: "Lucio: Increase Healing From Others"
Event.OnHealingTaken
Player.Lucio
if (Healer() != EventPlayer())
if (EventAbility() != null)
{
    Heal(Healer(), Healee(), EventHealing() * 0.25);
}

rule: "Moira: More Self Heal"
Event.OnDamageDealt
Player.Moira
if (EventAbility() == Button.SecondaryFire)
{
    Heal(Attacker(), Attacker(), 1.1);
    Wait(0.167, WaitBehavior.IgnoreCondition);
}

rule: "Moira: Resource"
Event.OngoingPlayer
Player.Moira
{
    if (IsFiringPrimary(EventPlayer()))
    {
        SetHealingDealt(EventPlayer(), 114.3);
        moira_resource -= 3.4;
    }
    else
    {
        SetHealingDealt(EventPlayer(), 100);
        moira_resource += 0.749;
    }
    SetAbilityResource(EventPlayer(), Button.PrimaryFire, moira_resource);
    if (moira_resource > 100)
    {
        moira_resource = 100;
    }
    Wait(0.2, WaitBehavior.IgnoreCondition);
    Loop();
}

rule: "Moira: Gain Resource From Damage"
Event.OnDamageDealt
Player.Moira
if (EventAbility() == Button.SecondaryFire)
{
    moira_resource += 1;
}

rule: "Moira: Cant Fade while ulting"
Event.OngoingPlayer
Player.Moira
if (IsUsingUltimate(EventPlayer()) == true)
{
    SetAbility1Enabled(EventPlayer(), false);
    WaitUntil(IsUsingUltimate(EventPlayer()) == false, 8);
    SetAbility1Enabled(EventPlayer(), true);
}

rule: "Moira: Cant super jump in Fade"
Event.OngoingPlayer
Player.Moira
if (IsUsingAbility1(EventPlayer()) == true)
{
    DestroyEffect(anti_nade_effect);
    anti_nade_check = 0;
    SetHealingReceived(EventPlayer(), healing_recieved * 100);
    anti_nade_effect = null;
    Discorder.discord_timer = 3;
    SetJumpVerticalSpeed(EventPlayer(), 50);
    WaitUntil(IsUsingAbility1(EventPlayer()) == false, 10);
    SetJumpVerticalSpeed(EventPlayer(), 100);
}

rule: "Rein: 1 firestrike"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility2(EventPlayer()) == true)
{
    SetAbility2Enabled(EventPlayer(), false);
    Wait(7, WaitBehavior.IgnoreCondition);
    SetAbility2Enabled(EventPlayer(), true);
}

rule: "Rein: Movement Speed Penalty"
Event.OngoingPlayer
Player.Reinhardt
if (IsFiringSecondary(EventPlayer()) == true)
{
    SetMoveSpeed(EventPlayer(), 75);
    WaitUntil(IsFiringSecondary(EventPlayer()) == false, 100);
    SetMoveSpeed(EventPlayer(), 100);
}

rule: "Rein: Hammer Damage"
Event.OngoingPlayer
Player.Reinhardt
if (IsFiringPrimary(EventPlayer()) == true)
{
    SetDamageDealt(EventPlayer(), 88.235);
}

rule: "Rein: Firestrike Damage"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility2(EventPlayer()) == true)
{
    SetDamageDealt(EventPlayer(), 100);
}

rule: "Rein: Pin Damage"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1(EventPlayer()) == true)
{
    SetDamageDealt(EventPlayer(), 133.333);
}

rule: "Rein: Ult Damage"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingUltimate(EventPlayer()) == true)
if (IsOnGround(EventPlayer()) == true)
{
    SetDamageDealt(EventPlayer(), 20);
    Wait(3, WaitBehavior.IgnoreCondition);
}

rule: "Rein: Raise Outer Ult Damage"
Event.OnDamageDealt
Player.Reinhardt
if (EventAbility() == Button.Ultimate)
if (EventDamage() < 50)
{
    Damage(Victim(), Attacker(), 50 - EventDamage());
}

rule: "Winston: Primal Range boop range"
Event.OnDamageTaken
if (HeroOf(Attacker()) == Hero.Winston)
if (IsUsingUltimate(Attacker()) == true)
{
    Wait(0.05, WaitBehavior.IgnoreCondition);
    if (Victim().role == 0)
    {
        ApplyImpulse(Victim(), DirectionTowards(PositionOf(Victim()), PositionOf(Victim()) + VelocityOf(Victim())), SpeedOf(Victim()) * 0.5, Relative.ToWorld, ContraryMotion.Incorporate);
    }
}

rule: "Winston: Primal Rage Health Change"
Event.OngoingPlayer
Player.Winston
if (IsUsingUltimate(EventPlayer()) == true)
{
    RemoveHealthPoolFromPlayer(health_reference);
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 1015.38, true, true);
    health_reference = LastCreatedHealthPool();
    Wait(0.017, WaitBehavior.IgnoreCondition);
    healee = EventPlayer();
    healer = null;
    amount = 2000;
    workshopHeal();
    Wait(10, WaitBehavior.IgnoreCondition);
    RemoveHealthPoolFromPlayer(health_reference);
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 476.92, true, true);
    health_reference = LastCreatedHealthPool();
}

rule: "Winston: Reduce Armor Damage"
Event.OnDamageDealt
Player.Winston
if (HealthOfType(Victim(), HealthType.Armor) > 1)
{
    Heal(Victim(), null, EventDamage() * 0.3);
}

rule: "Zarya: Personal Bubble"
Event.OngoingPlayer
Player.Zarya
if (IsUsingAbility1(EventPlayer()) == true)
{
    Wait(0.033, WaitBehavior.IgnoreCondition);
    SetAbility1Enabled(EventPlayer(), false);
    zarya_shield_cooldown_1 = 10;
    while (zarya_shield_cooldown_1 > 0)
    {
        Wait(1, WaitBehavior.IgnoreCondition);
        zarya_shield_cooldown_1 -= 1;
    }
    SetAbility1Enabled(EventPlayer(), true);
}

rule: "Zarya: Other Bubble"
Event.OngoingPlayer
Player.Zarya
if (IsUsingAbility2(EventPlayer()) == true)
{
    Wait(0.033, WaitBehavior.IgnoreCondition);
    SetAbility2Enabled(EventPlayer(), false);
    zarya_shield_cooldown_2 = 8;
    while (zarya_shield_cooldown_2 > 0)
    {
        Wait(1, WaitBehavior.IgnoreCondition);
        zarya_shield_cooldown_2 -= 1;
    }
    SetAbility2Enabled(EventPlayer(), true);
}

rule: "Zarya: Recieved Bubble"
Event.OngoingPlayer
if (HasStatus(EventPlayer(), Status.Invincible) == true)
{
    Discorder.discord_timer = 3;
    DestroyEffect(anti_nade_effect);
    anti_nade_check = 0;
    SetHealingReceived(EventPlayer(), healing_recieved * 100);
    anti_nade_effect = null;
}

rule: "Zen: Raise Damage from non kick attack"
Event.OnDamageDealt
Player.Zenyatta
if (EventAbility() == Button.Melee)
{
    healee = Victim();
    healer = null;
    amount = 15;
    workshopHeal();
}

rule: "Shield Health Regen"
Event.OngoingPlayer
Player.Zenyatta
if (current_shield_health < max_shield_health)
{
    time_since_damage_shield += 0.5;
    if (time_since_damage_shield >= 3)
    {
        healee = EventPlayer();
        healer = null;
        amount = Min(3.333, max_shield_health - current_shield_health);
        workshopHeal();
        current_shield_health += Min(3.333, max_shield_health - current_shield_health);
        if (current_shield_health > max_shield_health)
        {
            current_shield_health = max_shield_health;
        }
        time_since_damage_shield = 2.5;
    }
    Wait(0.5, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

rule: "Shield Timer Reset"
Event.OnDamageTaken
Player.Zenyatta
if (Attacker() != null)
{
    time_since_damage_shield = 0;
    current_shield_health = HealthOfType(EventPlayer(), HealthType.Shields);
}

rule: "Zen: Decreased Boop Range"
Event.OnDamageTaken
if (HeroOf(Attacker()) == Hero.Zenyatta)
if (EventAbility() == Button.Melee)
{
    Wait(0.05, WaitBehavior.IgnoreCondition);
    ApplyImpulse(Victim(), DirectionTowards(PositionOf(Victim()), PositionOf(Victim()) + VelocityOf(Victim())) * Vector(-1, [], -1), SpeedOf(Victim()) * 0.9, Relative.ToWorld, ContraryMotion.Incorporate);
}

rule: "Round 1 Over"
if (scrim_mode == true)
if (CurrentGameMode() != GameMode.Control)
if (IsBetweenRounds() == true)
if (IsTeamOnOffense(Team.Team2) == true)
if (scrim_mode_state == 0)
{
    SetTeamScore(Team.Team2, 3);
    scrim_mode_state = 1;
}

rule: "Round 2 Start"
if (scrim_mode == true)
if (CurrentGameMode() != GameMode.Control)
if (IsBetweenRounds() == false)
if (scrim_mode_state == 1)
{
    scrim_mode_state = 2;
}

rule: "Round 2 Over"
if (scrim_mode == true)
if (CurrentGameMode() != GameMode.Control)
if (IsBetweenRounds() == true)
if (scrim_mode_state == 2)
{
    SetTeamScore(Team.Team2, 3);
    DeclareMatchDraw();
}

rule: "Reduce Select Hero"
if (scrim_mode == true)
if (IsAssemblingHeroes() == true)
{
    SetMatchTime(10);
}

rule: "Control Score Count"
if (scrim_mode == true)
if (CurrentGameMode() == GameMode.Control)
if (IsBetweenRounds() == true)
{
    scrim_mode_state += 1;
    SetTeamScore(Team.Team1, 0);
    SetTeamScore(Team.Team2, 0);
}

rule: "Control Declare Draw"
if (scrim_mode == true)
if (CurrentGameMode() == GameMode.Control)
if (scrim_mode_state == 3)
{
    DeclareMatchDraw();
}