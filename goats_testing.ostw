globalvar define server_load_average;
globalvar define server_load_count;
globalvar define debug_mode;
globalvar define scrim_mode;
globalvar define team_1_lucio;
globalvar define team_2_lucio;
globalvar define team_1_moira;
globalvar define team_2_moira;
globalvar define team_1_brig;
globalvar define team_2_brig;
playervar define nano_check;
playervar define anti_nade_check;
playervar define anti_nade_effect;
playervar define effect_scale;
playervar define health_reference;
playervar define armor_reference;
playervar define shield_reference;
playervar define dva_ult_check;
playervar define dva_health_check;
playervar define lucio_music;
playervar define damage_var;
playervar define damage_taken;
playervar define move_var;
playervar define move_modify;// (0,Dva Primary Fire) (1,Lucio Speed) (2, brig ult)
playervar define time_since_damage;
playervar define time_since_damage_shield;
playervar define max_health;//normal max health of hero
playervar define max_shield_health;
playervar define current_shield_health;
playervar define lucio_beat;
playervar define lucio_overhealth;
playervar define role;
playervar define is_asleep;
playervar define LastTarget;
playervar define DiscordTarget;
playervar define discord_timer;
playervar define dam_modify;//(0,zen orb) (1,rein) (2,brig) (3,armor)
playervar define dam_var;
playervar define is_shattered;
playervar define moira_hot;
playervar define moira_hot_ref;
playervar define brig_hud_ref;
playervar define moira_resource;
playervar define brig_ult;
playervar define brig_ult_ref;
playervar define brig_ult_armor_ref;
playervar define brig_ult_armor_amount;
playervar define ult_charge;
playervar define ult_charge_max;
playervar define brig_inspire;
playervar define brig_inspire_ref;
playervar define brig_damage_timer;
playervar define player_hero;
playervar define zen_discord_reference;
playervar define brig_shield_range;
playervar define stored_ult_charge;
playervar define healing_recieved;
playervar define array_sum_temp;
playervar define hero_list;
playervar define current_health;
playervar define zen_harmony_target;
playervar define zen_harmony_timer;
playervar define zen_harmony_heal;
playervar define zen_harmony_ref;
playervar define booped;
globalvar define temp_count;
globalvar define lucio_mode;
playervar define interact_button;
playervar define damage_float;
globalvar define server_stress_time;

rule:"Create Server Load Text"
Event.OngoingGlobal
if(HasSpawned(PlayersInSlot(0,Team.Team1)))
{
	//DisableInspectorRecording();
    CreateHudText(AllPlayers(),null,null,"Server Load: {0}".Format([ServerLoad()]),Location.Left,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleAlways);
    CreateHudText(AllPlayers(),null,null,"Server Load Average: {0}".Format([ServerLoadAverage()]),Location.Left,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleAlways);
	//lucio_mode = WorkshopSettingToggle("Testing","Reverts Lucio to old speed boost values, breaks other things and might crash", false, 2);
}

Number sum_array_damage(Player temp_player)
{
	temp_player.array_sum_temp = 100;
	for(temp_count = 0; temp_count < 4; temp_count++)
	{
		temp_player.array_sum_temp += temp_player.dam_modify[temp_count];
		Wait(1/60);
	}
	temp_player.damage_taken = temp_player.array_sum_temp;
	temp_player.damage_float = temp_player.damage_taken/100;
	return temp_player.array_sum_temp;
}

Number sum_array_speed(Player temp_player)
{
	temp_player.array_sum_temp = 100;
	for(temp_count = 0; temp_count < 3; temp_count++)
	{
		temp_player.array_sum_temp += temp_player.move_modify[temp_count];
	}
	temp_player.move_var = temp_player.array_sum_temp;
	return array_sum_temp;
}
void default_setup()
{
	hero_list = [Hero.Dva, Hero.Reinhardt, Hero.Winston, Hero.Zarya, Hero.Ana, Hero.Brigitte, Hero.Lucio, Hero.Moira, Hero.Zenyatta];
	RemoveAllHealthPoolsFromPlayer(EventPlayer());
	move_modify[0] = 0;// (0,Dva Primary Fire) (1,Lucio Speed) (2, brig ult)
	move_modify[1] = 0;
	move_modify[2] = 0;
	dam_modify[0] = 0;//(0,zen orb) (1,rein) (2,brig) (3,armor)
	dam_modify[1] = 0;
	dam_modify[2] = 0;
	dam_modify[3] = 0;
	ult_charge = 0;
	SetHealingReceived(EventPlayer(), 100);
	healing_recieved = 1;
	brig_ult_armor_amount = 0;
	brig_ult = 0;
	SetUltimateAbilityEnabled(EventPlayer(),true);
	DestroyEffect(brig_ult_ref);
	SetMaxHealth(EventPlayer(),100);
	SetMoveSpeed(EventPlayer(),100);
	SetDamageReceived(EventPlayer(),100);
	RemoveAllHealthPoolsFromPlayer(EventPlayer());
	RemoveHealthPoolFromPlayer(EventPlayer().brig_ult_armor_ref);
	player_hero = HeroOf(EventPlayer());
    Wait(0.016); 
    if(HeroOf(EventPlayer()) == Hero.Ana)
    {
        ana_setup();
    }    
    else if(HeroOf(EventPlayer()) == Hero.Brigitte)
    {
        brig_setup();
    } 
    else if(HeroOf(EventPlayer()) == Hero.Lucio)
    {
        lucio_setup();
    }      
    else if(HeroOf(EventPlayer()) == Hero.Moira)
    {
        moira_setup();
    }      
    else if(HeroOf(EventPlayer()) == Hero.Zenyatta)
    {
        zen_setup();
    }    
	Wait(0.016);
    if(HeroOf(EventPlayer()) == Hero.Dva)
    {
        dva_setup();
    }    
    else if(HeroOf(EventPlayer()) == Hero.Reinhardt)
    {
        rein_setup();
    }    
    else if(HeroOf(EventPlayer()) == Hero.Winston)
    {
        winton_setup();
    }    
    else if(HeroOf(EventPlayer()) == Hero.Zarya)
    {
        zarya_setup();
    }   
}

void ana_setup()
{
    effect_scale = 0.5;
    role = 1;
    ult_charge_max = 100;
    ult_charge_max = 2100;
    Wait(0.016);
}

void brig_setup()
{
	SetUltimateAbilityEnabled(EventPlayer(),false);
	if( TeamOf(EventPlayer()) == Team.Team1)
	{
		team_1_brig = EventPlayer();
	}
	else
	{
		team_2_brig = EventPlayer();
	}
	role = 1;
	effect_scale = 1.0;
	ult_charge_max = 2550;
	//ult_charge_max = 255;
	//dam_modify[2] = 100;
	healing_recieved = 1;
	//sum_array_damage(EventPlayer());
	//SetDamageReceived(EventPlayer(),damage_taken);
	SetHealingReceived(EventPlayer(), 100);
	SetHealingDealt(EventPlayer(),1);
	SetMaxHealth(EventPlayer(),50);
	health_reference = AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,50,true,true);
	DestroyHudText(brig_hud_ref);
	brig_hud_ref = CreateHudText(EventPlayer(),null,null,"{0}".Format([EventPlayer().ult_charge/EventPlayer().ult_charge_max*100]),Location.Right,1,Color.White,Color.Black,Color.White,HudTextRev.String,Spectators.VisibleNever);
}

void dva_setup()
{
	while(MaxHealth(EventPlayer()) > 600)
	{
		SetMaxHealth(EventPlayer(), 10);
		Wait(1/30);
	}
	ult_charge_max = 1540;
	dva_ult_check = 0;
}

void lucio_setup()
{
	effect_scale = 0.5;
	role = 1;
	ult_charge_max = 2900;
	if( TeamOf(EventPlayer()) == Team.Team1)
	{
		team_1_lucio = EventPlayer();
	}
	else
	{
		team_2_lucio = EventPlayer();
	}
}
void rein_setup()
{
	Wait(1/10);
	effect_scale = 1.0;
	role = 0;
	ult_charge_max = 1540;
	dam_modify[1] = 100;
	SetMaxHealth(EventPlayer(),(2000/1200) * 100);
	sum_array_damage(EventPlayer());
	SetDamageReceived(EventPlayer(),damage_taken);
	SetHealingReceived(EventPlayer(),200);
	healing_recieved = 2;
}
void moira_setup()
{
	effect_scale = 1.0;
	role = 1;
	moira_resource = 100;
	ult_charge_max = 2390;
	SetHealingDealt(EventPlayer(),115);
}

void winton_setup()
{
	effect_scale = 1.0;
	ult_charge_max = 1540;
	role = 0;
	SetMaxHealth(EventPlayer(),(600/650)*100);
	health_reference = AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,476.92,true,true);
	armor_reference  = AddHealthPoolToPlayer(EventPlayer(),HealthType.Armor,15.39,true,true);
	dam_modify[1] = 100;
	sum_array_damage(EventPlayer());
	SetDamageReceived(EventPlayer(),damage_taken);
	healing_recieved = 2;
}

void zarya_setup()
{
	effect_scale = 1.0;
	max_shield_health = 200;
	ult_charge_max = 2100;
	current_shield_health = 200;
	role = 0;
	//SetMaxHealth(EventPlayer(),50);
	AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,150,true,true);
	AddHealthPoolToPlayer(EventPlayer(),HealthType.Shields,175,true,true);
	dam_modify[1] = 100;
	sum_array_damage(EventPlayer());
	SetDamageReceived(EventPlayer(),damage_taken);
}

void zen_setup()
{
	effect_scale = 0.5;
	ult_charge_max = 2310;
	damage_var = (46/48)*100;
	max_shield_health = 150;
	current_shield_health = 150;
	role = 1;
	SetDamageDealt(EventPlayer(), damage_var);
	CreateHudText(EventPlayer(),null,null,"Discord: {0}".Format([HeroOf(DiscordTarget)]),Location.Right,0,Color.White,Color.White,Color.Purple,HudTextRev.String,Spectators.VisibleNever);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//General
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
rule: "Anti Crash"
Event.OngoingGlobal
{
	if(ServerLoad() > 240)
	{
		server_stress_time += 1;
	}
	else
	{
		server_stress_time = 0;
	}
	if(server_stress_time > 15)
	{
		SetSlowMotion(10);
	}
	if(server_stress_time == 0)
	{
		SetSlowMotion(100);
	}
	Wait(1/5);
	Loop();
}

rule:"Has Spawned Setup"
Event.OngoingPlayer
if(HasSpawned())
{
	//set up all heroes as needed
    default_setup(); 
}

rule: "Create bot"
Event.OngoingPlayer
if(IsButtonHeld(EventPlayer(),Button.Interact))
{
	//create dummy bot for testing
    DestroyAllDummyBots();
	Wait(1/60);
	//Damage(EventPlayer(),null,100);
    CreateDummyBot(Hero.Reinhardt,Team.Team1,1,EventPlayer(),FacingDirectionOf(EventPlayer()));
}


rule:"Increased Knockback"
Event.OngoingPlayer
if(booped == 1)
{
	//when a tank recieves a knockback effect, booped will turn to true, so it will wait to let the players velocity change, then raise it a bit more, to remove the tank knockback resistance
	Wait(1/20);
	ApplyImpulse(EventPlayer(),DirectionTowards(PositionOf(EventPlayer()),PositionOf(EventPlayer())+VelocityOf(EventPlayer())),SpeedOf(EventPlayer())*0.5,Relative.ToWorld,ContraryMotion.Incorporate);
	booped = 0;
}

rule:"Check For Hero Swap"
Event.OngoingPlayer
if(HeroOf(EventPlayer()) != player_hero)
if(HeroOf(EventPlayer()) != Hero.Soldier76)
{
	default_setup();
}

//manually track ult charge to ignore tank passive of giving less ult charge
rule:"Ult Charge"
Event.OngoingPlayer
if(IsUsingUltimate(EventPlayer()) == false)
if(IsGameInProgress())
if(!IsBetweenRounds())
{
	if(ult_charge >= ult_charge_max)
	{
		//if at max ult charge, no need to update for awhile until ult is used
		ult_charge = ult_charge_max;
		SetUltimateCharge(EventPlayer(),100);
	}
	SetUltimateCharge(EventPlayer(),ult_charge/ult_charge_max*100);
	if(ult_charge/ult_charge_max < 0.8)
	{
		//update ult charge less frequently when not close to ult to save on resources
		ult_charge += 1;
		Wait(RandomReal(0.9,1.1));//apply slight randomness to wait time, to shift load around
	}
	else
	{	
		ult_charge += 1/10;
		Wait(1/10);
	}
	
	Loop();
}

rule:"Ult Charge Raise from Damage"
Event.OnDamageDealt
if(IsUsingUltimate(EventPlayer()) == false)
if(Victim() != Attacker())
{
	ult_charge += EventDamage()/(Victim().damage_float);
}

rule:"Ult Charge Raise from Healing"
Event.OnHealingDealt
if(IsUsingUltimate(EventPlayer()) == false)
if(!IsBetweenRounds())
{
	ult_charge += EventHealing()/(Healee().healing_recieved);
}

rule: "Reset Ult Charge"
Event.OngoingPlayer
if(UltimateChargePercent() >= 100 && IsButtonHeld(EventPlayer(),Button.Ultimate))
{
	ult_charge = 0;
}

rule: "Reset on Round End"
Event.OngoingPlayer
if(IsBetweenRounds() == true)
{
	ult_charge = 0;
}

//if a support has less hp, deal a tiny bit of damage just before the support passive kicks in so they dont regen health
//ordered conditions in this way so three people always checking, vs six checking some of the time
rule:"Remove Support Passive"
Event.OngoingPlayer
if(role == 1)
if(Health(EventPlayer()) < MaxHealth(EventPlayer()))
if(is_asleep == false)
{
	Heal(EventPlayer(),null,0.1);
	Damage(EventPlayer(),null,0.1);
	Wait(1.46);
	LoopIfConditionIsTrue();
}

rule:"Comp Check Tank"
Event.OngoingPlayer
if(HeroOf(EventPlayer()) == Hero.Reinhardt || HeroOf(EventPlayer()) == Hero.Winston)
{
	define temp_team_hero = AllPlayers(TeamOf(EventPlayer()));
	for(temp_count = 0; temp_count < 6; temp_count++)
	{
		if(temp_team_hero[temp_count] != EventPlayer())
		{
			RemoveFromArray(temp_team_hero[temp_count].hero_list,[Hero.Reinhardt,Hero.Winston]);
			SetAllowedHeroes(temp_team_hero[temp_count],temp_team_hero[temp_count].hero_list);
		}
	}
}
rule:"Comp Check Support"
Event.OngoingPlayer
if(HeroOf(EventPlayer()) == Hero.Ana || HeroOf(EventPlayer()) == Hero.Moira || HeroOf(EventPlayer()) == Hero.Zenyatta)
{
	define temp_team_hero = AllPlayers(TeamOf(EventPlayer()));
	for(temp_count = 0; temp_count < 6; temp_count++)
	{
		if(temp_team_hero[temp_count] != EventPlayer())
		{
			RemoveFromArray(temp_team_hero[temp_count].hero_list,[Hero.Ana,Hero.Moira,Hero.Zenyatta]);
			SetAllowedHeroes(temp_team_hero[temp_count],temp_team_hero[temp_count].hero_list);
		}
	}
}

rule: "Hold F for 3 seconds"
Event.OngoingPlayer
if(IsButtonHeld(EventPlayer(),Button.Interact))
if(IsInSpawnRoom(EventPlayer()))
{
	interact_button += 0.5;
	if(interact_button > 3)
	{
		if(HeroOf(EventPlayer()) == Hero.Dva && IsInAlternateForm(EventPlayer()) == true)
		{
			//do hero swap stuff
			ForcePlayerHero(EventPlayer(),Hero.Sojourn);
			StopForcingHero(EventPlayer());
			Wait(0.1);
			ForcePlayerHero(EventPlayer(), player_hero);
			StopForcingHero(EventPlayer());
			interact_button = 0;
		}
		else
		{
			//do hero swap stuff
			ForcePlayerHero(EventPlayer(),Hero.Soldier76);
			StopForcingHero(EventPlayer());
			Wait(0.1);
			ForcePlayerHero(EventPlayer(), player_hero);
			StopForcingHero(EventPlayer());
			interact_button = 0;
		}

	}
	if(!IsButtonHeld(EventPlayer(),Button.Interact))
	{
		interact_button = 0;
	}
	Wait(0.5);
	LoopIfConditionIsTrue();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ANA
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule: "Ana Primary Fire"
Event.OnDamageDealt
Player.Ana
if(EventAbility() == Button.PrimaryFire)
{
	//since her damage ticks so fast, heal a little bit of each tick to make up for the 5 extra damage she does
    Heal(Victim(),null,EventDamage()*0.07);
}

rule: "Ana Anti Nade"
Event.OnDamageDealt
Player.Ana
if(EventAbility() == Button.Ability2)
{
	//Set healing recieved to 0, and create an extra effect that will last for new anti nade duration
	DestroyEffect( Victim().anti_nade_effect);
    Victim().anti_nade_check = 1;
    Victim().anti_nade_effect = CreateEffect(AllPlayers(), Effect.Ring, Color.Purple, Victim(), effect_scale, EffectRev.VisibleToPositionAndRadius);
    SetHealingReceived(Victim(), 0);
	Wait(4);
	DestroyEffect( Victim().anti_nade_effect);
	Victim().anti_nade_check = 0;
	SetHealingReceived(Victim(), 100);
}

rule: "Ana Sleep Dart Duration"
Event.OnDamageDealt
Player.Ana
if(EventAbility() == Button.Ability1)
{
	Wait(1/60);
	Victim().is_asleep = true;
	Wait(2);
	if(Victim().is_asleep == true)
	{
		ClearStatus(Victim(),Status.Asleep);
		SetStatus(Victim(), Attacker(), Status.Asleep, 100);
		Wait(3);
		ClearStatus(Victim(), Status.Asleep);
		Victim().is_asleep = false;
	}

}

rule: "Ana: Slept Target gets woken up"
Event.OnDamageTaken
if(is_asleep == true)
{
	is_asleep = false;
}

rule: "Ana: Remove Nano Heal"
Event.OnHealingDealt
Player.Ana
//damage nano reciever for the health it gave
if(EventAbility() == Button.Ultimate)
if(Healee().nano_check == 0)
{
	Healee().nano_check = 1;
	if(Healee().anti_nade_check == 0)
	{
        Damage(Healee(),null,EventHealing());
	}
	Wait(8);
	Healee().nano_check = 0;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Raid Boss
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
rule: "Brig: Increased Boop Range"
Event.OnDamageDealt
Player.Brigitte
if(EventAbility() == Button.Ability1)
{
	Victim().booped = 1;
}

rule: "Brig: Try and cancel ult"
Event.OngoingPlayer
Player.Brigitte
if(IsButtonHeld(EventPlayer(),Button.Ultimate))
if(ult_charge >= ult_charge_max-1)
{
	PlayEffect(AllPlayers(),PlayEffect.BuffExplosionSound,Color.White,EventPlayer(),100);
	//raise brigs speed during ult
	move_modify[2] = 30;
	sum_array_speed(EventPlayer());
	SetMoveSpeed(EventPlayer(),move_var);
	//manually create effects
	ult_charge = 0;
	brig_ult = true;
	brig_ult_ref = CreateEffect(AllPlayers(),Effect.Ring,Color.Yellow,PositionOf(EventPlayer()),8.5);
	
	Wait(10);
	brig_ult = false;
	DestroyEffect(brig_ult_ref);
	move_modify[2] = 0;
	sum_array_speed(EventPlayer());
	SetMoveSpeed(EventPlayer(),move_var);
}

rule:"Brig: Shield Bash Stun"
Event.OnDamageDealt
Player.Brigitte
if(IsFiringSecondary())
{
	if(brig_shield_range > 2)
	{
		SetStatus(Victim(),Attacker(),Status.Stunned,0.9);
	}
	//if she damages with shield, give stun effect
	
}

rule:"Brig: Ult Armor Gen"
Event.OngoingPlayer
Player.Brigitte
if(brig_ult == true)
{
	//manually give players the armor from rally
	time_since_damage = PlayersWithinRadius(PositionOf(EventPlayer()),10,TeamOf(EventPlayer()),RadiusLOS.SurfacesAndEnemyBarriers);
	ult_charge = 0;
	time_since_damage.brig_ult_armor_amount += 15*time_since_damage.damage_float;
	if(time_since_damage.brig_ult_armor_amount > 150*time_since_damage.damage_float)
	{
		time_since_damage.brig_ult_armor_amount = 150*time_since_damage.damage_float;
	}
	RemoveHealthPoolFromPlayer(time_since_damage.brig_ult_armor_ref);
	time_since_damage.brig_ult_armor_ref = AddHealthPoolToPlayer(EventPlayer(),HealthType.Armor,brig_ult_armor_amount,false,true);
	Wait(0.5);
	LoopIfConditionIsTrue();
}

rule: "Brig: Repair Pack Default"
Event.OnHealingDealt
Player.Brigitte
if (EventAbility() == Button.Ability2)
if (HeroOf(Healee()) != Hero.Lucio)
{
	define temp_health = MaxHealth(Healee()) - Health(Healee());
	define heal_amount = 150;
	heal_amount -= temp_health;
	if (temp_health > 150)
	{
		Heal(Healee(), Healer(), 150);
	}
	else
	{
		Heal(Healee(), Healer(), temp_health);
	}
	if (heal_amount > 75)
	{
		heal_amount = 75;
	}
	AddHealthPoolToPlayer(Healee(), HealthType.Armor, heal_amount, false, true);
	temp_health = LastCreatedHealthPool();
	SetAbility2Enabled(EventPlayer(), false);
	Wait(6, WaitBehavior.IgnoreCondition);
	RemoveHealthPoolFromPlayer(temp_health);
	SetAbility2Enabled(EventPlayer(), true);
}

rule: "Brig: Repair Pack Lucio"
Event.OnHealingDealt
Player.Brigitte
if (EventAbility() == Button.Ability2)
if (HeroOf(Healee()) == Hero.Lucio)
{
	define temp_health = MaxHealth(Healee()) - Health(Healee());
	define heal_amount = 150;
	heal_amount -= temp_health;
	if (temp_health > 150)
	{
		Heal(Healee(), Healer(), 150 / Healee().healing_recieved);
	}
	else
	{
		Heal(Healee(), Healer(), temp_health / Healee().healing_recieved);
	}
	if (heal_amount > 75)
	{
		heal_amount = 75;
	}
	AddHealthPoolToPlayer(Healee(), HealthType.Armor, heal_amount * healing_recieved, false, true);
	temp_health = LastCreatedHealthPool();
	SetAbility2Enabled(EventPlayer(), false);
	Wait(6, WaitBehavior.IgnoreCondition);
	RemoveHealthPoolFromPlayer(temp_health);
	SetAbility2Enabled(EventPlayer(), true);
}

rule: "Brig: Check Shield Bash Distance"
Event.OngoingPlayer
Player.Brigitte
if(IsFiringSecondary())
{
	//intensive function, get distance from brigs shield to enemy shield
	define temp_range = 5;
	if(!IsInLineOfSight(EyePosition(EventPlayer())+FacingDirectionOf(EventPlayer()),EyePosition(EventPlayer())+FacingDirectionOf(EventPlayer())*Vector(temp_range,0,temp_range),BarrierLOS.EnemyBarriersBlock))
	{
		for(temp_count = 1; temp_count < 10; temp_count++)
		{
			if(IsInLineOfSight(EyePosition(EventPlayer())+FacingDirectionOf(EventPlayer()),EyePosition(EventPlayer())+FacingDirectionOf(EventPlayer())*Vector(temp_range,0,temp_range),BarrierLOS.EnemyBarriersBlock))
			{
				temp_range += (5/2)/temp_count;
			}
			else
			{
				temp_range -= (5/2)/temp_count;
			}
		}
	}
	brig_shield_range = temp_range;
	Wait(1/4);
	Loop();
}

rule: "Brig: Used Shield Bash"
Event.OngoingPlayer
Player.Brigitte
if(IsFiringSecondary(EventPlayer()))
if(IsFiringPrimary(EventPlayer()))
{
	//if brig is too close to enemy shield do nothing
	if(brig_shield_range < 2.35 && brig_shield_range <= 0.88 && brig_shield_range >= 0.89)
	{
		SetStatus(EventPlayer(),null,Status.Stunned,0.01);
	}
	else//slow her down to shorten travel distance
	{
		move_modify[0] = -40;
		sum_array_speed(EventPlayer());
		SetMoveSpeed(EventPlayer(),move_var);
	}
	Wait(1/30);
	LoopIfConditionIsTrue();
	move_modify[0] = 0;
	sum_array_speed(EventPlayer());
	SetMoveSpeed(EventPlayer(),move_var);
}

rule:"Brig: Reduce Armor From Damage"
Event.OnDamageTaken
if(brig_ult_armor_amount > 0)
{
	//ignore lucio beat and shield health, leaving armor
	define temp_damage = EventDamage();
	temp_damage -= lucio_beat;
	temp_damage -= HealthOfType(EventPlayer(),HealthType.Shields);
	brig_ult_armor_amount -= temp_damage;
	if(brig_ult_armor_amount < 0)
	{
		brig_ult_armor_amount = 0;
	}
}


rule: "Brig: Activate Inspire Damage"
Event.OnDamageDealt
Player.Brigitte
{
	brig_inspire = 1.5;
}

rule: "Brig: Create Inspire Healing"
Event.OngoingPlayer
Player.Brigitte
if(brig_inspire > 0)
{
	time_since_damage = PlayersWithinRadius(PositionOf(EventPlayer()),20,TeamOf(EventPlayer()),RadiusLOS.SurfacesAndEnemyBarriers);
	StopHealOverTime(time_since_damage.brig_inspire_ref);
	time_since_damage.brig_inspire_ref = StartHealOverTime(time_since_damage,EventPlayer(),6,16);
	Wait(1.5,WaitBehavior.AbortWhenFalse);
	brig_inspire = 0;
}

rule: "Brig: Raise Self Healing"
Event.OnHealingTaken
Player.Brigitte
if(Healer() == Healee())
if(EventAbility() != null)
{
	Heal(Healee(),Healer(),EventHealing()*100);
}

rule: "Reset on Round End"
Event.OngoingPlayer
if(IsBetweenRounds() == true)
{
	ult_charge = 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Dva
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule:"Dva: Increased Dva booster boop range"
Event.OnDamageDealt
Player.Dva
if(EventAbility() == Button.Ability1)
{
	Victim().booped = 1;
	
}

rule: "Dva: Movement Speed Penalty 1"
Event.OngoingPlayer
Player.Dva
if(IsFiringPrimary(EventPlayer()))
if(IsInAlternateForm() == false)
{
	if(IsUsingAbility1(EventPlayer()) == false)
	{
		move_modify[0] = -16.67;
		sum_array_speed(EventPlayer());
		SetMoveSpeed(EventPlayer(),move_var);
	}
	//goal movespeed of 2.75 m/s
	//50%
}

rule: "Dva: Movement Speed Penalty 2"
Event.OngoingPlayer
Player.Dva
if((IsFiringPrimary(EventPlayer()) == 0) || (IsUsingAbility1(EventPlayer()) == true))
if(IsInAlternateForm() == false)
{
	//goal movespeed of 2.75 m/s
	//50%
	move_modify[0] = 0;
	sum_array_speed(EventPlayer());
	SetMoveSpeed(EventPlayer(),move_var);
}

rule: "Dva: Boosters Damage"
Event.OnDamageDealt
Player.Dva
if(EventAbility() == Button.Ability1)
{
	//heal 5 hp since damage is low enough its not likely to lead to a kill from the 5 health
	Heal(Victim(), null, 5);
}

rule: "Dva: Reduce Remech Damage"
Event.OngoingPlayer
Player.Dva
if(IsUsingUltimate(EventPlayer()))
if(IsInAlternateForm() == true)
{
	SetDamageDealt(EventPlayer(), 20);
	Wait(1);
	SetDamageDealt(EventPlayer(), 100);
}


rule: "Dva: Melee Cancels Boosters"
Event.OngoingPlayer
Player.Dva
if (IsUsingAbility1(EventPlayer()) == true)
if (IsButtonHeld(EventPlayer(), Button.Melee) == true)
{
	PressButton(EventPlayer(), Button.Ability1);
}

rule: "Dva: Baby Health"
Event.OngoingPlayer
Player.Dva
if (IsInAlternateForm(EventPlayer()) == true)
{
	RemoveHealthPoolFromPlayer(armor_reference);
	RemoveHealthPoolFromPlayer(health_reference);
	ult_charge_max = 315;
	if (IsUsingUltimate(EventPlayer()))
	{
		stored_ult_charge = 0;
		ult_charge = ult_charge_max;
	}
	else
	{
		stored_ult_charge = ult_charge;
		ult_charge = 0;
	}
	define temp_health = 151 - HealthOfType(EventPlayer(), HealthType.Health);
	Heal(EventPlayer(), null, temp_health);
	AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 50, true, true);
}

rule: "Dva: Mech Health"
Event.OngoingPlayer
Player.Dva
if (!IsInAlternateForm(EventPlayer()) == true)
{
	RemoveAllHealthPoolsFromPlayer(EventPlayer());
	Wait(0.033, WaitBehavior.IgnoreCondition);
	SetMaxHealth(EventPlayer(), 66);
	Wait(0.033, WaitBehavior.IgnoreCondition);
	ult_charge_max = 1540;
	ult_charge = stored_ult_charge;
	Wait(0.033, WaitBehavior.IgnoreCondition);
	Heal(EventPlayer(), null, 1000);
	define temp_health = 400 - HealthOfType(EventPlayer(), HealthType.Health);
	AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, temp_health, true, true);
	health_reference = LastCreatedHealthPool();
	SetUltimateCharge(EventPlayer(), ult_charge / ult_charge_max);
	if (MaxHealthOfType(EventPlayer(), HealthType.Armor) < 200)
	{
		define temp_armor = 200 - HealthOfType(EventPlayer(), HealthType.Armor);
		AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, temp_armor, true, true);
		armor_reference = LastCreatedHealthPool();
	}
}


rule: "Dva: Melee Cancels Boosters"
Event.OngoingPlayer
Player.Dva
if(IsUsingAbility1(EventPlayer()))
if(IsButtonHeld(EventPlayer(),Button.Melee))
{
	PressButton(EventPlayer(),Button.Ability1);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Lucio
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule: "Lucio: Increased Boop Range"
Event.OnDamageDealt
Player.Lucio
if(EventAbility() == Button.SecondaryFire)
{
	Victim().booped = 1;
}

/*
rule: "Lucio: Apply Speed Boost Effects"
Event.OngoingPlayer
Player.Lucio
if(lucio_mode == true)//only runs if set to in workshop settings
if(IsButtonHeld(EventPlayer(),Button.Ability1) || IsButtonHeld(EventPlayer(),Button.Ability2))
{
	//get players in range and los, adjust speed if using speed boost
	time_since_damage = PlayersWithinRadius(PositionOf(EventPlayer()),10,TeamOf(EventPlayer()),RadiusLOS.SurfacesAndEnemyBarriers);
	if(IsUsingAbility1(EventPlayer()))
	{
		if(IsUsingAbility2(EventPlayer()))
		{
			//speed amp
			time_since_damage.move_modify[1] = 6.3;
			sum_array_speed(time_since_damage);
			SetMoveSpeed(time_since_damage,time_since_damage.move_var);

		}
		else
		{
			//normal speed
			time_since_damage.move_modify[1] = 4;
			sum_array_speed(time_since_damage);
			SetMoveSpeed(time_since_damage,time_since_damage.move_var);
		}
	}
	else
	{
		time_since_damage.move_modify[1] = 0;
		sum_array_speed(time_since_damage);
		SetMoveSpeed(time_since_damage,time_since_damage.move_var);
	}
	Wait(0.25);
	LoopIfConditionIsTrue();
}

rule: "Lucio: Remove Speed From Other Players"
Event.OngoingPlayer
Player.Lucio
if(lucio_mode == true)
{
	//remove effect of speed boost from those that leave lucios aura with bit of grace time
	time_since_damage = FilteredArray(AllPlayers(TeamOf(EventPlayer())),!IsInLineOfSight(EventPlayer(),ArrayElement(),BarrierLOS.EnemyBarriersBlock) || DistanceBetween(EventPlayer(),ArrayElement()) > 10);
	time_since_damage.move_modify[1] = 0;
	sum_array_speed(time_since_damage);
	SetMoveSpeed(time_since_damage,time_since_damage.move_var);
	Wait(1);
	Loop();
}

rule:"Lucio: Increase Healing From Others"
Event.OnHealingTaken
if((HeroOf(Healee())==Hero.Lucio) && HeroOf(Healer()) != Hero.Lucio)
{
	//this is to reduce self healing
	Heal(Healee(), Healer(), EventHealing()*0.563);
}


rule:"Lucio: Check For Beat Hit"
Event.OngoingPlayer
if(IsUsingUltimate(team_1_lucio))
if(TeamOf(EventPlayer()) == Team.Team1)
if(MaxHealth(EventPlayer()) >= max_health+745)
{
	//if recieves beat, remove it
	Damage(EventPlayer(),null,748);
	//give each player a slight offset for beat health to reduce peak server load
	Wait(RandomReal(0,3/30));
	lucio_beat = 500;
}

rule:"Lucio: Check For Beat Hit 2"
Event.OngoingPlayer
if(IsUsingUltimate(team_2_lucio))
if(TeamOf(EventPlayer()) == Team.Team2)
if(MaxHealth(EventPlayer()) >= max_health+745)
{
	Damage(EventPlayer(),null,748);
	//give each player a slight offset for beat health to reduce peak server load
	Wait(RandomReal(0,3/30));
	lucio_beat = 500;
}

rule:"Lucio: Simulate Beat"
Event.OngoingPlayer
if(lucio_beat > 0)
{
	//create beat health pool and adjust it over time
	RemoveHealthPoolFromPlayer(lucio_overhealth);
	lucio_overhealth = AddHealthPoolToPlayer(EventPlayer(),HealthType.Shields, lucio_beat, false, true);
	lucio_beat -= 25;
	if(lucio_beat <= 0)
	{
		lucio_beat = 0;
		RemoveHealthPoolFromPlayer(lucio_overhealth);
	}
	else
	{
		Wait(1/5);
		LoopIfConditionIsTrue();
	}

}

rule:"Lucio: Update Beat health from damage"
Event.OnDamageTaken
if(lucio_beat > 0)
{
	//lucio beat health should always be on top so this works fine
	lucio_beat -= EventDamage();
}
*/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Moira
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule: "Moira: More Self Heal"
Event.OnDamageDealt
Player.Moira
if(EventAbility() == Button.SecondaryFire)
{
	//increased self heal
	Heal(Attacker(),Attacker(),1.1);
	Wait(1/6);
	LoopIfConditionIsTrue();
}
rule:"Moira: Resource"
Event.OngoingPlayer
Player.Moira
{
	//manually track resource, her meter used to last alot longer but refilled much slower
	if(IsFiringPrimary(EventPlayer()))
	{
		SetHealingDealt(EventPlayer(),114.3);
		moira_resource -= 11/30;
	}
	else
	{
		SetHealingDealt(EventPlayer(),100);
		moira_resource += 3.744/30;
	}
	SetAbilityResource(EventPlayer(),Button.PrimaryFire,moira_resource);
	//cap resource
	if(moira_resource > 100)
	{
		moira_resource = 100;
	}
	Wait(1/30);
	Loop();
}

rule:"Moira: Gain Resource From Damage"
Event.OnDamageDealt
Player.Moira
if(IsFiringPrimary(EventPlayer()))
{
	moira_resource += 12.15/30;
	Wait(1/30);
	LoopIfConditionIsTrue();
}

rule:"Moira: Cant Fade while ulting"
Event.OngoingPlayer
Player.Moira
if(IsUsingUltimate())
{
	//disable fade until ult is over
	SetAbility1Enabled(EventPlayer(),false);
	WaitUntil(IsUsingUltimate() == false,8);
	SetAbility1Enabled(EventPlayer(),true);
}


rule:"Moira: Cant jump in Fade"
Event.OngoingPlayer
Player.Moira
if(IsUsingAbility1())
{
	DisallowButton(EventPlayer(),Button.Jump);
	WaitUntil(IsUsingAbility1() == false,10);
	AllowButton(EventPlayer(),Button.Jump);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Rein
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
rule: "Rein: 1 firestrike"
Event.OngoingPlayer
Player.Reinhardt
if(IsUsingAbility2(EventPlayer()))
{
	SetAbility2Enabled(EventPlayer(),false);
	Wait(7);
	SetAbility2Enabled(EventPlayer(),true);
}

rule: "Rein: Movement Speed Penalty"
Event.OngoingPlayer
Player.Reinhardt
if(IsFiringSecondary(EventPlayer()))
{
	
	
	//goal movespeed of 2.75 m/s
	//50%
	move_modify[0] = -35;
	sum_array_speed(EventPlayer());
	SetMoveSpeed(EventPlayer(),move_var);
	//lower speed when holding shield, wait until its put down
	WaitUntil(IsFiringSecondary() == false,100);
	move_modify[0] = 0;
	sum_array_speed(EventPlayer());
	SetMoveSpeed(EventPlayer(),move_var);
}

rule: "Rein: Hammer Damage"
Event.OngoingPlayer
Player.Reinhardt
if(IsFiringPrimary())
{
	SetDamageDealt(EventPlayer(),(75/85)*100);
}

rule: "Rein: Firestrike Damage"
Event.OngoingPlayer
Player.Reinhardt
if(IsUsingAbility2())
{
	SetDamageDealt(EventPlayer(),100);
}

rule: "Rein: Pin Damage"
Event.OngoingPlayer
Player.Reinhardt
if(IsUsingAbility1())
{
	SetDamageDealt(EventPlayer(),(300/225)*100);
}

rule: "Rein: Ult Damage"
Event.OngoingPlayer
Player.Reinhardt
if(IsUsingUltimate())
if(IsOnGround())
{
	SetDamageDealt(EventPlayer(),20);
}

rule: "Rein: Raise Outer Ult Damage"
Event.OnDamageDealt
Player.Reinhardt
if(EventAbility() == Button.Ultimate)
if(EventDamage() < 50)
{
	Damage(Victim(),Attacker(),50-EventDamage());
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//winton
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule: "Winston: Primal Range boop range"
Event.OnDamageTaken
if(HeroOf(Attacker()) == Hero.Winston)
if(IsUsingUltimate(Attacker()))
{
	Wait(1/20);
	if(Victim().role == 0)
	{
		ApplyImpulse(Victim(),DirectionTowards(PositionOf(Victim()),PositionOf(Victim())+VelocityOf(Victim())),SpeedOf(Victim())*0.5,Relative.ToWorld,ContraryMotion.Incorporate);
	}
}


rule: "Winston: Primal Rage Health Change"
Event.OngoingPlayer
Player.Winston
if(IsUsingUltimate())
{
	RemoveHealthPoolFromPlayer(health_reference);
	health_reference = AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,1015.38,true,true);
	Wait(1/60);
	Heal(EventPlayer(),null,2000);
	Wait(10);
	RemoveHealthPoolFromPlayer(health_reference);
	health_reference = AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,476.92,true,true);
	//SetMaxHealth(EventPlayer(),100);
	//Heal(EventPlayer(),null,1000);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Zarya
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule: "Zarya: Personal Bubble"
Event.OngoingPlayer
Player.Zarya
if(IsUsingAbility1(EventPlayer()))
{
	SetAbility1Enabled(EventPlayer(),false);
	Wait(10);
	SetAbility1Enabled(EventPlayer(),true);
}

rule: "Zarya: Other Bubble"
Event.OngoingPlayer
Player.Zarya
if(IsUsingAbility2(EventPlayer()))
{
	SetAbility2Enabled(EventPlayer(),false);
	Wait(10);
	SetAbility2Enabled(EventPlayer(),true);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Zenyatta
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule:"Zen: Raise Damage from non kick attack"
Event.OnDamageDealt
Player.Zenyatta
if(EventAbility() == Button.Melee)
{
	Heal(Victim(),null,15);
}

rule: "Shield Health Regen"
Event.OngoingPlayer
Player.Zenyatta
if(current_shield_health < max_shield_health)
{
	time_since_damage_shield += 1/2;
	if(time_since_damage_shield >= 3)
	{
		Heal(EventPlayer(),null,Min(20/6,max_shield_health-current_shield_health));
		current_shield_health += Min(20/6,max_shield_health-current_shield_health);
		if(current_shield_health > max_shield_health)
		{
			current_shield_health = max_shield_health;
		}
		time_since_damage_shield = 3-(1/2);
	}
	Wait(1/2);
	LoopIfConditionIsTrue();
}

rule: "Shield Timer Reset"
Event.OnDamageTaken
Player.Zenyatta
if(Attacker() != null)
{
	time_since_damage_shield = 0;
	current_shield_health = HealthOfType(EventPlayer(),HealthType.Shields);
}

rule: "Zen: Decreased Boop Range"
Event.OnDamageTaken
if(HeroOf(Attacker()) == Hero.Zenyatta)
if(EventAbility() == Button.Melee)
{
	Wait(1/20);
	ApplyImpulse(Victim(),DirectionTowards(PositionOf(Victim()),PositionOf(Victim())+VelocityOf(Victim()))*Vector(-1,0,-1),SpeedOf(Victim())*0.9,Relative.ToWorld,ContraryMotion.Incorporate);
}

rule: "Zen Opponent Array LOS Check - PROD (credit Shattered)"
Event.OngoingPlayer
Player.Zenyatta
if (IsUsingAbility2(EventPlayer()) == true)
{
	Damage(FilteredArray(AllLivingPlayers(OppositeTeamOf(TeamOf(EventPlayer()))), IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)), EventPlayer(), 0.1);
}

rule: "Zen Discord Orb Damage Mod - PROD (credit Shattered)"
Event.OnDamageDealt
Player.Zenyatta
if (EventDamage() < 0.2)
{
	Heal(Victim(), null, EventDamage());
	if (EventDamage() != 0.1 && EventDamage() != 0.05)
	{
		if(Attacker().LastTarget != 0)
		{
			DestroyEffect(zen_discord_reference);
			Attacker().LastTarget.dam_modify[0] = 0;
			sum_array_damage(Attacker().LastTarget);
			SetDamageReceived(Attacker().LastTarget, Attacker().LastTarget.damage_taken);
			DestroyEffect(zen_discord_reference);
		}
		Victim().dam_modify[0] = 4;
		sum_array_damage(Victim());
		SetDamageReceived(Victim(), Victim().damage_taken);
		Attacker().DiscordTarget = Victim();
		LastTarget = Victim();
		zen_discord_reference = CreateEffect(AllPlayers(),Effect.BadAura,Color.Purple,Victim(),Victim().effect_scale/2,EffectRev.PositionAndRadius);
		
	}
}

rule: "Zen: Reset Discord"
Event.OngoingPlayer
Player.Zenyatta
if (!IsInLineOfSight(EventPlayer(),DiscordTarget,BarrierLOS.NoBarriersBlock))
if(DiscordTarget != 0)
{
	if(discord_timer >= 3)
	{
		DiscordTarget.dam_modify[0] = 0;
		sum_array_damage(DiscordTarget);
		SetDamageReceived(DiscordTarget, DiscordTarget.damage_taken);
		DiscordTarget = 0;
		LastTarget = 0;
		discord_timer = 0;
		DestroyEffect(zen_discord_reference);
	}
	else if(discord_timer >= 2)
	{
		DiscordTarget.dam_modify[0] = 30;
		sum_array_damage(DiscordTarget);
		SetDamageReceived(DiscordTarget, DiscordTarget.damage_taken);
	}
	discord_timer += 1/4;
	Wait(1/4);
	Loop();
}

rule: "Zen: Reset 3 sec timer"
Event.OngoingPlayer
Player.Zenyatta
if (IsInLineOfSight(EventPlayer(),DiscordTarget,BarrierLOS.NoBarriersBlock))
{
	discord_timer = 0;
	Wait(1/4);
	LoopIfConditionIsTrue();
}
