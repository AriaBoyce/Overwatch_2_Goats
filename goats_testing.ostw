//0M6MN: Workshop code being used for this
//Created by Aria Boyce, PROD (credit Shattered), Used Concepts From Seita Scrim Lobby for very lightweight scrim mode

//global vars
globalvar define temp_count;
globalvar define server_stress_time;
globalvar define scrim_mode_state;
globalvar define scrim_mode;

//general variables
playervar define effect_scale;
playervar define health_reference;
playervar define armor_reference;
playervar define shield_reference;
playervar define damage_var;
playervar define damage_taken;
playervar define move_var;
playervar define move_modify;// (0,Dva Primary Fire) (1,Lucio Speed) (2, brig ult)
playervar define role;
playervar define dam_modify;//(0,zen orb) (1,rein) (2,brig) (3,armor)
playervar define player_hero;
playervar define healing_recieved;
playervar define array_sum_temp;
playervar define hero_list;
playervar define booped;
playervar define interact_button;
playervar define damage_float;

//ana variables
playervar define nano_check;
playervar define anti_nade_check;
playervar define anti_nade_effect;
playervar define is_asleep;
playervar define ana_healing_nade_healing;

//brig variables
playervar define brig_hud_ref;
playervar define brig_ult;
playervar define brig_ult_ref;
playervar define brig_ult_armor_ref;
playervar define brig_ult_armor_amount;
playervar define ult_charge;
playervar define ult_charge_max;
playervar define brig_inspire;
playervar define brig_inspire_ref;
playervar define brig_shield_range;
playervar define brig_enemy_range;
playervar define armor_pack_ref;

//moira variables
playervar define moira_resource;

//zarya variables
playervar define zarya_shield_cooldown_1;
playervar define zarya_shield_cooldown_2;
playervar define healing_dealt;

//zen variables
playervar define zarya_hud_ref;
playervar define zen_discord_hud_ref;
playervar define time_since_damage;
playervar define time_since_damage_shield;
playervar define max_shield_health;
playervar define current_shield_health;
playervar define LastTarget;
playervar define DiscordTarget;
playervar define discord_timer;
playervar define zen_discord_reference;
playervar define Discorder;

void workshopHeal(Player healee, Player healer, Number amount) "Nade-safe heal for workshop purposes"
{
    //@RunAs EventPlayer
    if(anti_nade_check==1 && healer == null){ //if naded but workshop is trying to heal them
        SetHealingReceived(healee,100); //we don't use the healing recived percentage because this is for exact values
        Heal(healee,healer,amount);
        SetHealingReceived(healee,0);
    }else{ //not taking any chances.
        Heal(healee,healer,amount);
    }
}

rule:"Disable Inspector"
{
	DisableInspectorRecording();
    scrim_mode_state = 0;
    scrim_mode = WorkshopSettingToggle("Scrim Mode","Active",false,0);
    //CreateHudText(AllPlayers(Team.All),null,null,"Server Load: {0}".Format([ServerLoad()]),Location.Left,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleAlways);
    //CreateHudText(AllPlayers(Team.All),null,null,"Server Load Average: {0}".Format([ServerLoadAverage()]),Location.Left,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleAlways);
}

//Sum up damage taken changes
Number sum_array_damage(Player temp_player)
{
	temp_player.array_sum_temp = 100;
	for(temp_count = 0; temp_count < 2; temp_count++)
	{
		temp_player.array_sum_temp += temp_player.dam_modify[temp_count];
		Wait(1/60);
	}
	temp_player.damage_taken = temp_player.array_sum_temp;
	temp_player.damage_float = temp_player.damage_taken/100;
	return temp_player.array_sum_temp;
}

//sum up move speed changes
Number sum_array_speed(Player temp_player)
{
	temp_player.array_sum_temp = 100;
	for(temp_count = 0; temp_count < 3; temp_count++)
	{
		temp_player.array_sum_temp += temp_player.move_modify[temp_count];
	}
	temp_player.move_var = temp_player.array_sum_temp;
	return array_sum_temp;
}

void default_setup()
{
	DestroyHudText(zarya_hud_ref);
	DestroyHudText(brig_hud_ref);
	DestroyHudText(zen_discord_hud_ref);
	SetAbility1Enabled(EventPlayer(),true);
	SetAbility2Enabled(EventPlayer(),true);
	SetUltimateCharge(EventPlayer(),0);
	healing_dealt = 100;
	damage_float = 1.0;
	hero_list = [Hero.Dva, Hero.Reinhardt, Hero.Winston, Hero.Zarya, Hero.Ana, Hero.Brigitte, Hero.Lucio, Hero.Moira, Hero.Zenyatta];
	RemoveAllHealthPoolsFromPlayer(EventPlayer());
	move_modify[0] = 0;// (0,Dva Primary Fire) (1,Lucio Speed) (2, brig ult)
	move_modify[1] = 0;
	move_modify[2] = 0;
	dam_modify[0] = 0;//(0,zen orb) (1,rein) (2,brig) (3,armor)
	dam_modify[1] = 0;
	dam_modify[2] = 0;
	dam_modify[3] = 0;
	ult_charge = 0;
	SetHealingReceived(EventPlayer(), 100);
	healing_recieved = 1;
	brig_ult_armor_amount = 0;
	brig_ult = 0;
	SetUltimateAbilityEnabled(EventPlayer(),true);
	DestroyEffect(brig_ult_ref);
	SetMaxHealth(EventPlayer(),100);
	SetMoveSpeed(EventPlayer(),100);
	SetDamageReceived(EventPlayer(),100);
	RemoveAllHealthPoolsFromPlayer(EventPlayer());
	RemoveHealthPoolFromPlayer(EventPlayer().brig_ult_armor_ref);
	player_hero = HeroOf(EventPlayer());
    Wait(0.016); 
    if(HeroOf(EventPlayer()) == Hero.Ana)
    {
        ana_setup();
    }    
    else if(HeroOf(EventPlayer()) == Hero.Brigitte)
    {
        brig_setup();
    } 
    else if(HeroOf(EventPlayer()) == Hero.Lucio)
    {
        lucio_setup();
    }      
    else if(HeroOf(EventPlayer()) == Hero.Moira)
    {
        moira_setup();
    }      
    else if(HeroOf(EventPlayer()) == Hero.Zenyatta)
    {
        zen_setup();
    }    
	Wait(0.016);
    if(HeroOf(EventPlayer()) == Hero.Dva)
    {
        dva_setup();
    }    
    else if(HeroOf(EventPlayer()) == Hero.Reinhardt)
    {
        rein_setup();
    }    
    else if(HeroOf(EventPlayer()) == Hero.Winston)
    {
        winton_setup();
    }    
    else if(HeroOf(EventPlayer()) == Hero.Zarya)
    {
        zarya_setup();
    }   
	SmallMessage(EventPlayer(),"Patch Version: 2.0.12 6/8/2023");
}

void ana_setup()
{
    effect_scale = 0.5;
    role = 1;//support
	ana_healing_nade_healing = 40/1.5;//healing nade extra healing to remove nerf
	damage_float = 1.0;
}

void brig_setup()
{
	//SetUltimateAbilityEnabled(EventPlayer(),false);
	role = 1;
	effect_scale = 1.0;
	ult_charge_max = 2550;
	healing_recieved = 1;
	SetHealingReceived(EventPlayer(), 100);
	SetHealingDealt(EventPlayer(),1);
	SetMaxHealth(EventPlayer(),50);
	health_reference = AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,50,true,true);
	DestroyHudText(brig_hud_ref);
	damage_float = 1.0;
	healing_dealt = 100;
	//brig_hud_ref = CreateHudText(EventPlayer(),null,null,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{0}{1}{2}".Format(["                                                                                                                 ","                                                              ",RoundToInteger( EventPlayer().ult_charge/EventPlayer().ult_charge_max*100)]),Location.Left,0,Color.White,Color.Black,Color.White,HudTextRev.String,Spectators.VisibleNever);
	//CreateHudText(EventPlayer(),null,null,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{0}{1}{2}".Format(["                                                                                                                 ","                                                              ",brig_shield_range]),Location.Left,0,Color.White,Color.Black,Color.White,HudTextRev.String,Spectators.VisibleNever);
}

void dva_setup()
{
	role = 0;
	Wait(1);
	StartHoldingButton(EventPlayer(),Button.Interact);
	interact_button = 3;
	Wait(1/2);
	StopHoldingButton(EventPlayer(),Button.Interact);
	SmallMessage(EventPlayer(),"Forced Reset at spawn to deal with rare health issue. :)");
}

void lucio_setup()
{
	effect_scale = 0.5;
	role = 1;
	damage_float = 1.0;
	healing_dealt = 100;
}
void rein_setup()
{
	Wait(1/10);
	effect_scale = 1.0;
	role = 0;
	dam_modify[1] = 100;
	SetMaxHealth(EventPlayer(),(2000/1200) * 100);
	sum_array_damage(EventPlayer());
	SetDamageReceived(EventPlayer(),damage_taken);
	SetHealingReceived(EventPlayer(),200);
	damage_float = 2.0;
	healing_recieved = 2;
}
void moira_setup()
{
	effect_scale = 1.0;
	role = 1;
	moira_resource = 100;
	ult_charge_max = 2390;
	healing_dealt = 115;
	SetHealingDealt(EventPlayer(),115);
	damage_float = 1.0;
}

void winton_setup()
{
	effect_scale = 1.0;
	ult_charge_max = 1540;
	role = 0;
	SetMaxHealth(EventPlayer(),(600/650)*100);
	health_reference = AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,476.92,true,true);
	armor_reference  = AddHealthPoolToPlayer(EventPlayer(),HealthType.Armor,15.39,true,true);
	dam_modify[1] = 100;
	sum_array_damage(EventPlayer());
	SetDamageReceived(EventPlayer(),damage_taken);
	healing_recieved = 2;
	damage_float = 2.0;
}

void zarya_setup()
{
	effect_scale = 1.0;
	max_shield_health = 200;
	ult_charge_max = 2100;
	//ult_charge_max = 100;
	current_shield_health = 200;
	zarya_shield_cooldown_1 = 0;
	zarya_shield_cooldown_2 = 0;
	role = 0;
	healing_recieved = 2;
	SetHealingReceived(EventPlayer(),200);
	//SetMaxHealth(EventPlayer(),50);
	AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,150,true,true);
	AddHealthPoolToPlayer(EventPlayer(),HealthType.Shields,175,true,true);
	dam_modify[1] = 100;
	sum_array_damage(EventPlayer());
	SetDamageReceived(EventPlayer(),damage_taken);
	damage_float = 2.0;
	zarya_hud_ref = CreateHudText(EventPlayer(),null,null,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    {0}                                                                    {1}             {2}".Format(["                                                                                                                      ","                                                                                "+RoundToInteger(zarya_shield_cooldown_1),RoundToInteger(zarya_shield_cooldown_2)]),Location.Left,1,Color.White,Color.Black,Color.White,HudTextRev.String,Spectators.VisibleNever);
}

void zen_setup()
{
	effect_scale = 0.5;
	ult_charge_max = 2310;
	//ult_charge_max = 10;
	damage_var = (46/48)*100;
	max_shield_health = 150;
	current_shield_health = 150;
	role = 1;
	SetDamageDealt(EventPlayer(), damage_var);
	//zen_discord_hud_ref = CreateHudText(EventPlayer(),null,null,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{0}{1}{2}".Format(["                                                                                    ","                                                                                                                 ",HeroOf( DiscordTarget)]),Location.Left,0,Color.White,Color.White,Color.Purple,HudTextRev.String,Spectators.VisibleNever);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//General
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
rule: "Anti Crash"
Event.OngoingGlobal
{
	if(ServerLoad() > 240)
	{
		server_stress_time += 1;
	}
	else
	{
		server_stress_time = 0;
	}
	if(server_stress_time == 6)
	{
		SmallMessage(AllPlayers(),"Anti Crash Slow Mode");
		SetSlowMotion(10);
	}
	if(server_stress_time == 0)
	{
		SetSlowMotion(100);
	}
	Wait(1/2);
	Loop();
}

rule:"Has Spawned Setup"
Event.OngoingPlayer
if(HasSpawned())
{
	//set up all heroes as needed
    default_setup(); 
}

rule: "Remove Effects On Death"
Event.OnDeath
{
	DestroyEffect(anti_nade_effect);
	DestroyEffect(ana_healing_nade_healing);
	DestroyEffect(brig_ult_ref);
	brig_ult = 0;
	DestroyEffect(zen_discord_reference);
	Discorder.discord_timer = 3;
	discord_timer = 3;
	dam_modify[0] = 0;
	sum_array_damage(EventPlayer());
	SetDamageReceived(EventPlayer(),damage_taken);
	DestroyEffect(zen_discord_reference);
	Wait(1);
	Discorder.DiscordTarget = null;
}
rule:"Increased Knockback"
Event.OngoingPlayer
if(booped == 1)
{
	//when a tank recieves a knockback effect, booped will turn to true, so it will wait to let the players velocity change, then raise it a bit more, to remove the tank knockback resistance
	Wait(1/20);
	ApplyImpulse(EventPlayer(),DirectionTowards(PositionOf(EventPlayer()),PositionOf(EventPlayer())+VelocityOf(EventPlayer())*Vector(1,0,1)),SpeedOf(EventPlayer())*0.5,Relative.ToWorld,ContraryMotion.Incorporate);
	booped = 0;
}

rule:"Check For Hero Swap"
Event.OngoingPlayer
if(HeroOf(EventPlayer()) != player_hero)
if(HeroOf(EventPlayer()) != Hero.Soldier76)
{
	default_setup();
}

//to try and fix a random bug where people just stop getting healed. reset healing values every once in awhile
rule: "Healing Check Default"
Event.OngoingPlayer
if(HeroOf(EventPlayer()) != Hero.Lucio)
{
	if(anti_nade_check == 0)
	{
		SetHealingReceived(EventPlayer(),healing_recieved*100);
	}
	SetHealingDealt(EventPlayer(),healing_dealt);
	sum_array_damage(EventPlayer());//reset damage taken on occassion to try and fix random double hp people not taking double damage
	SetDamageReceived(EventPlayer(),damage_taken);
	Wait(5);
	Loop();
}

rule: "Healing Check Lucio"
Event.OngoingPlayer
Player.Lucio
{
	if(anti_nade_check == 0)
	{
		SetHealingReceived(EventPlayer(),80);
	}
	SetHealingDealt(EventPlayer(),100);
	Wait(5);
	Loop();
}

//manually track ult charge for brig since she cant use default ult
rule:"Brig: Ult Charge"
Event.OngoingPlayer
Player.Brigitte
if(IsUsingUltimate(EventPlayer()) == false)
if(IsGameInProgress())
if(!IsBetweenRounds())
{
	if(ult_charge >= ult_charge_max)
	{
		//if at max ult charge, no need to update for awhile until ult is used
		ult_charge = ult_charge_max;
	}
	ult_charge += 2/3;//passive ult gain, higher = more, old value 1/10
	Wait(1/5);
	SetUltimateCharge(EventPlayer(),Min(99,ult_charge/ult_charge_max*100));
	Loop();
}

rule:"Ult Charge Raise from Damage"
Event.OnDamageDealt
Player.Brigitte
if(IsUsingUltimate(EventPlayer()) == false)
if(Victim() != Attacker())
{
	ult_charge += EventDamage()/(Victim().damage_float);
}

rule:"Ult Charge Raise from Healing"
Event.OnHealingDealt
Player.Brigitte
if(IsUsingUltimate(EventPlayer()) == false)
if(!IsBetweenRounds())
{
	ult_charge += EventHealing()/(Healee().healing_recieved);
}

rule: "Reset on Round End"
Event.OngoingPlayer
if(IsBetweenRounds() == true)
{
	ult_charge = 0;
	SetAbility1Enabled(EventPlayer(),true);
	SetAbility2Enabled(EventPlayer(),true);
	DestroyAllEffects();
	brig_ult = false;
	brig_ult_armor_amount = 0;
	Wait(10);
	DestroyAllEffects();
	dam_modify[0] = 0;
	sum_array_damage(EventPlayer());
	SetDamageReceived(EventPlayer(),damage_taken);
	SetAbility1Enabled(EventPlayer(),true);
	SetAbility2Enabled(EventPlayer(),true);
	SetJumpEnabled(EventPlayer(),true);
	DestroyAllEffects();
}

//if a support has less hp, deal a tiny bit of damage just before the support passive kicks in so they dont regen health
//ordered conditions in this way so three people always checking, vs six checking some of the time
rule:"Remove Support Passive"
Event.OngoingPlayer
if(role == 1)
if(Health(EventPlayer()) < MaxHealth(EventPlayer()))
if(is_asleep == false)
{
	workshopHeal(EventPlayer(),null,0.01);
	Damage(EventPlayer(),null,0.01);
	Wait(1.46);
	LoopIfConditionIsTrue();
}

rule:"Comp Check Tank"
Event.OngoingPlayer
if(HeroOf(EventPlayer()) == Hero.Reinhardt || HeroOf(EventPlayer()) == Hero.Winston)
{
	define temp_team_hero = AllPlayers(TeamOf(EventPlayer()));
	for(temp_count = 0; temp_count < 6; temp_count++)
	{
		if(temp_team_hero[temp_count] != EventPlayer())
		{
			RemoveFromArray(temp_team_hero[temp_count].hero_list,[Hero.Reinhardt,Hero.Winston]);
			SetAllowedHeroes(temp_team_hero[temp_count],temp_team_hero[temp_count].hero_list);
		}
	}
}
rule:"Comp Check Support"
Event.OngoingPlayer
if(HeroOf(EventPlayer()) == Hero.Ana || HeroOf(EventPlayer()) == Hero.Moira || HeroOf(EventPlayer()) == Hero.Zenyatta)
{
	define temp_team_hero = AllPlayers(TeamOf(EventPlayer()));
	for(temp_count = 0; temp_count < 6; temp_count++)
	{
		if(temp_team_hero[temp_count] != EventPlayer())
		{
			RemoveFromArray(temp_team_hero[temp_count].hero_list,[Hero.Ana,Hero.Moira,Hero.Zenyatta]);
			SetAllowedHeroes(temp_team_hero[temp_count],temp_team_hero[temp_count].hero_list);
		}
	}
}

rule: "Hold F for 3 seconds"
Event.OngoingPlayer
if(IsButtonHeld(EventPlayer(),Button.Interact))
if(IsInSpawnRoom(EventPlayer()))
{
	interact_button += 0.5;
	if(interact_button > 3)
	{
		SetAbility1Enabled(EventPlayer(),true);
		SetAbility2Enabled(EventPlayer(),true);
		if(HeroOf(EventPlayer()) == Hero.Dva && IsInAlternateForm(EventPlayer()) == true)
		{
			//do hero swap stuff
			ForcePlayerHero(EventPlayer(),Hero.Sojourn);
			StopForcingHero(EventPlayer());
			Wait(0.1);
			ForcePlayerHero(EventPlayer(), player_hero);
			StopForcingHero(EventPlayer());
			interact_button = 0;
		}
		else
		{
			//do hero swap stuff
			ForcePlayerHero(EventPlayer(),Hero.Soldier76);
			StopForcingHero(EventPlayer());
			Wait(0.1);
			ForcePlayerHero(EventPlayer(), player_hero);
			StopForcingHero(EventPlayer());
			interact_button = 0;
		}

	}
	if(!IsButtonHeld(EventPlayer(),Button.Interact))
	{
		interact_button = 0;
	}
	Wait(0.5);
	LoopIfConditionIsTrue();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ANA
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule: "Ana Primary Fire"
Event.OnDamageDealt
Player.Ana
if(EventAbility() == Button.PrimaryFire)
{
	//since her damage ticks so fast, heal a little bit of each tick to make up for the 5 extra damage she does
    workshopHeal(Victim(),null,EventDamage()*0.07);
}

rule: "Ana Anti Nade"
Event.OnDamageDealt
Player.Ana
if(EventAbility() == Button.Ability2)
{
	//Set healing recieved to 0, and create an extra effect that will last for new anti nade duration
    Victim().anti_nade_check = 1;
	Wait(3.5);
	Victim().anti_nade_check = 0;
	anti_nade_effect = null;
}

//restore extra healing from healing nade
rule: "Ana: Healing Nade"
Event.OnHealingDealt
Player.Ana
if(EventAbility() == Button.Ability2)
{
	Heal(Healee(),Healer(),ana_healing_nade_healing);
}

rule: "Ana Sleep Dart Duration"
Event.OnDamageDealt
Player.Ana
if(EventAbility() == Button.Ability1)
{
	Wait(1/60);
	Victim().is_asleep = true;
	Wait(2);//first two seconds of sleep duration
	if(Victim().is_asleep == true)
	{
		ClearStatus(Victim(),Status.Asleep);
		SetStatus(Victim(), Attacker(), Status.Asleep, 100);
		Wait(3);//wait next 3 seconds
		ClearStatus(Victim(), Status.Asleep);
		Victim().is_asleep = false;
	}

}

rule: "Ana: Slept Target gets woken up"
Event.OnDamageTaken
if(is_asleep == true)
{
	is_asleep = false;
}

rule: "Ana: Remove Nano Heal"
Event.OnHealingDealt
Player.Ana
//damage nano reciever for the health it gave
if(EventAbility() == Button.Ultimate)
if(Healee().nano_check == 0)
{
	Healee().nano_check = 1;
	if(Healee().anti_nade_check == 0)
	{
        Damage(Healee(),null,EventHealing());
	}
	Wait(8);
	Healee().nano_check = 0;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Raid Boss
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
rule: "Brig: Increased Boop Range"
Event.OnDamageDealt
Player.Brigitte
if(EventAbility() == Button.Ability1)
{
	Victim().booped = 1;
}

rule: "Brig: Try and cancel ult"
Event.OngoingPlayer
Player.Brigitte
if(IsButtonHeld(EventPlayer(),Button.Ultimate))
if(UltimateChargePercent(EventPlayer()) >= 99)
{
	BigMessage(AllPlayers(OppositeTeamOf(TeamOf(EventPlayer()))),"RAID BOSS INCOMING");
	BigMessage(AllPlayers(TeamOf(EventPlayer())),"RALLY TO ME");
	PlayEffect(AllPlayers(),PlayEffect.BuffExplosionSound,Color.White,EventPlayer(),100);
	//raise brigs speed during ult
	SetMoveSpeed(EventPlayer(),130);
	//manually create effects
	ult_charge = 0;
	brig_ult = true;
	brig_ult_ref = CreateEffect(AllPlayers(),Effect.Ring,Color.Yellow,PositionOf(EventPlayer()),8.5);
	Wait(10);
	brig_ult = false;
	DestroyEffect(brig_ult_ref);
	SetMoveSpeed(EventPlayer(),100);
}

rule:"Brig: Ult Armor Gen"
Event.OngoingPlayer
Player.Brigitte
if(brig_ult == true)
{
	//manually give players the armor from rally
	time_since_damage = PlayersWithinRadius(PositionOf(EventPlayer()),10,TeamOf(EventPlayer()),RadiusLOS.SurfacesAndEnemyBarriers);
	ult_charge = 0;
	for(define i = 0; i < 6; i++)
	{
		time_since_damage[i].brig_ult_armor_amount += 15*time_since_damage[i].healing_recieved;
		if(time_since_damage[i].brig_ult_armor_amount > 150*time_since_damage[i].healing_recieved)
		{
			time_since_damage[i].brig_ult_armor_amount = 150*time_since_damage[i].healing_recieved;
		}
		RemoveHealthPoolFromPlayer(time_since_damage[i].brig_ult_armor_ref);
		time_since_damage[i].brig_ult_armor_ref = AddHealthPoolToPlayer(time_since_damage[i],HealthType.Armor,time_since_damage[i].brig_ult_armor_amount,false,true);	
	}
	/*
	time_since_damage.brig_ult_armor_amount += 15*time_since_damage.healing_recieved;
	if(time_since_damage.brig_ult_armor_amount > 150*time_since_damage.healing_recieved)
	{
		time_since_damage.brig_ult_armor_amount = 150*time_since_damage.healing_recieved;
	}
	RemoveHealthPoolFromPlayer(time_since_damage.brig_ult_armor_ref);
	time_since_damage.brig_ult_armor_ref = AddHealthPoolToPlayer(time_since_damage,HealthType.Armor,time_since_damage.brig_ult_armor_amount,false,true);
	*/
	Wait(0.5);
	LoopIfConditionIsTrue();
}

rule: "Brig: Repair Pack Default"
Event.OnHealingDealt
Player.Brigitte
if (EventAbility() == Button.Ability2)
if (HeroOf(Healee()) != Hero.Lucio)
{
	define temp_health = MaxHealth(Healee()) - Health(Healee());
	define heal_amount = 150;
	heal_amount -= temp_health/Healee().healing_recieved;
	if (temp_health > 150)
	{
		workshopHeal(Healee(), Healer(), 150);
	}
	else
	{
		workshopHeal(Healee(), Healer(), temp_health);
	}
	if (heal_amount > 75)
	{
		heal_amount = 75;
	}
	if(heal_amount < 1)
	{
		heal_amount = 0;
	}
	Healee().armor_pack_ref = AddHealthPoolToPlayer(Healee(), HealthType.Armor, heal_amount*Healee().healing_recieved, false, true);
	SetAbility2Enabled(EventPlayer(), false);
	Wait(6, WaitBehavior.IgnoreCondition);
	SetAbility2Enabled(EventPlayer(), true);
}

rule: "Brig: Repair Pack Lucio"
Event.OnHealingDealt
Player.Brigitte
if (EventAbility() == Button.Ability2)
if (HeroOf(Healee()) == Hero.Lucio)
{
	define temp_health = MaxHealth(Healee()) - Health(Healee());
	define heal_amount = 150;
	heal_amount -= temp_health;
	if (temp_health > 150)
	{
		workshopHeal(Healee(), Healer(), 234);
	}
	else
	{
		workshopHeal(Healee(), Healer(), temp_health / 0.80);
	}
	if (heal_amount > 75)
	{
		heal_amount = 75;
	}
	Healee().armor_pack_ref = AddHealthPoolToPlayer(Healee(), HealthType.Armor, heal_amount, false, true);
	SetAbility2Enabled(EventPlayer(), false);
	Wait(6, WaitBehavior.IgnoreCondition);
	SetAbility2Enabled(EventPlayer(), true);
}

rule: "Brig: Remove Repair Pack Health"
Event.OngoingPlayer
if(armor_pack_ref != null)
{
	Wait(6);
	RemoveHealthPoolFromPlayer(armor_pack_ref);
	armor_pack_ref = null;
}

/*
rule: "Brig: Check Shield Bash Range"
Event.OngoingPlayer
Player.Brigitte
if(IsFiringSecondary(EventPlayer()))
if(!IsFiringPrimary(EventPlayer()))
{
	define temp_range = 5;
	if(!IsInLineOfSight(EyePosition(EventPlayer())+FacingDirectionOf(EventPlayer()),EyePosition(EventPlayer())+FacingDirectionOf(EventPlayer())*Vector(temp_range,0,temp_range),BarrierLOS.EnemyBarriersBlock))
	{
		for(temp_count = 1; temp_count < 12; temp_count++)
		{
			if(IsInLineOfSight(EyePosition(EventPlayer())+FacingDirectionOf(EventPlayer()),EyePosition(EventPlayer())+FacingDirectionOf(EventPlayer())*Vector(temp_range,0,temp_range),BarrierLOS.EnemyBarriersBlock))
			{
				temp_range += (5/2)/temp_count;
			}
			else
			{
				temp_range -= (5/2)/temp_count;
			}
		}
	}
	brig_shield_range = temp_range;
	brig_enemy_range = DistanceBetween(EventPlayer(),ClosestPlayerTo(PositionOf(EventPlayer()),OppositeTeamOf(TeamOf(EventPlayer()))));
	Wait(1/4);
	LoopIfConditionIsTrue();
}
*/
rule: "Brig: Used Shield Bash"
Event.OngoingPlayer
Player.Brigitte
if(IsFiringSecondary(EventPlayer()))
if(IsFiringPrimary(EventPlayer()))
{
	//change this to adjust shield bash distance
	SetMoveSpeed(EventPlayer(),50);
	/*
	define temp_range = 5;
	if(!IsInLineOfSight(EyePosition(EventPlayer())+FacingDirectionOf(EventPlayer()),EyePosition(EventPlayer())+FacingDirectionOf(EventPlayer())*Vector(temp_range,0,temp_range),BarrierLOS.EnemyBarriersBlock))
	{
		for(temp_count = 1; temp_count < 12; temp_count++)
		{
			if(IsInLineOfSight(EyePosition(EventPlayer())+FacingDirectionOf(EventPlayer()),EyePosition(EventPlayer())+FacingDirectionOf(EventPlayer())*Vector(temp_range,0,temp_range),BarrierLOS.EnemyBarriersBlock))
			{
				temp_range += (5/2)/temp_count;
			}
			else
			{
				temp_range -= (5/2)/temp_count;
			}
		}
	}
	brig_shield_range = temp_range;
	brig_enemy_range = DistanceBetween(EventPlayer(),ClosestPlayerTo(PositionOf(EventPlayer()),OppositeTeamOf(TeamOf(EventPlayer()))));
	if(brig_shield_range < 2.25)
	{
		//SetStatus(EventPlayer(),null,Status.Stunned,0.01);
	}
	*/
	Wait(1/4);
	SetMoveSpeed(EventPlayer(),100);
}

rule:"Brig: Shield Bash Stun"
Event.OnDamageDealt
Player.Brigitte
if(IsFiringSecondary())
if(EventAbility() == Button.PrimaryFire)
{
	SetStatus(Victim(),Attacker(),Status.Stunned,0.9);
	/*
	//if she damages with shield, give stun effect
	if(brig_shield_range > brig_enemy_range)
	{
		SetStatus(Victim(),Attacker(),Status.Stunned,0.9);
	}
	else
	{
		workshopHeal(Victim(),null,EventDamage()/Victim().healing_recieved);
	}
	*/
}

rule:"Brig: Reduce Armor From Damage"
Event.OnDamageTaken
if(brig_ult_armor_amount > 0)
{
	//ignore lucio beat and shield health, leaving armor
	define temp_damage = EventDamage();
	temp_damage -= HealthOfType(EventPlayer(),HealthType.Shields);
	brig_ult_armor_amount -= temp_damage;
	if(brig_ult_armor_amount < 0)
	{
		brig_ult_armor_amount = 0;
	}
}

//Use live: inaccuracy is only in a 1sec vs 1.5 second cooldown
// rule: "Brig: Activate Inspire Damage"
// Event.OnDamageDealt
// Player.Brigitte
// {
// 	brig_inspire = 1.5;
// }

// rule: "Brig: Create Inspire Healing"
// Event.OngoingPlayer
// Player.Brigitte
// if(brig_inspire > 0)
// {
// 	time_since_damage = PlayersWithinRadius(PositionOf(EventPlayer()),20,TeamOf(EventPlayer()),RadiusLOS.SurfacesAndEnemyBarriers);
// 	StopHealOverTime(time_since_damage.brig_inspire_ref);
// 	time_since_damage.brig_inspire_ref = StartHealOverTime(time_since_damage,EventPlayer(),6,16);
// 	Wait(1.5,WaitBehavior.AbortWhenFalse);
// 	brig_inspire = 0;
// }

rule: "Brig: Raise Self Healing"
Event.OnHealingTaken
Player.Brigitte
if(Healer() == Healee())
if(EventAbility() != null)
{
    Heal(Healee(),Healer(),EventHealing()*100); //dont use workshopHeal here
}

rule: "Reset on Round End"
Event.OngoingPlayer
if(IsBetweenRounds() == true)
{
	ult_charge = 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Dva
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule:"Dva: Increased Dva booster boop range"
Event.OnDamageDealt
Player.Dva
if(EventAbility() == Button.Ability1)
{
	Victim().booped = 1;
}

/*
rule: "Dva: Movement Speed Penalty 1"
Event.OngoingPlayer
Player.Dva
if(IsFiringPrimary(EventPlayer()))
if(IsInAlternateForm() == false)
{
	if(IsUsingAbility1(EventPlayer()) == false)
	{
		SetMoveSpeed(EventPlayer(),83.33);
	}
	//goal movespeed of 2.75 m/s
	//50%
}

rule: "Dva: Movement Speed Penalty 2"
Event.OngoingPlayer
Player.Dva
if((IsFiringPrimary(EventPlayer()) == 0) || (IsUsingAbility1(EventPlayer()) == true))
if(IsInAlternateForm() == false)
{
	//goal movespeed of 2.75 m/s
	//50%
	SetMoveSpeed(EventPlayer(),100);
}
*/
rule: "Dva: Boosters Damage"
Event.OnDamageDealt
Player.Dva
if(EventAbility() == Button.Ability1)
{
	//heal 5 hp since damage is low enough its not likely to lead to a kill from the 5 health
	workshopHeal(Victim(), null, 5);
}

rule: "Dva: Reduce Remech Damage"
Event.OngoingPlayer
Player.Dva
if(IsUsingUltimate(EventPlayer()))
if(IsInAlternateForm() == true)
{
	RemoveHealthPoolFromPlayer(health_reference);	
	SetDamageDealt(EventPlayer(), 20);
	Wait(1);
	SetDamageDealt(EventPlayer(), 100);
}

/*
rule: "Dva: Melee Cancels Boosters"
Event.OngoingPlayer
Player.Dva
if (IsUsingAbility1(EventPlayer()) == true)
if (IsButtonHeld(EventPlayer(), Button.Melee) == true)
{
	PressButton(EventPlayer(), Button.Ability1);
}
*/
rule: "Dva: Baby Health"
Event.OngoingPlayer
Player.Dva
if (IsInAlternateForm(EventPlayer()) == true)
{
	Discorder.discord_timer = 3;
	RemoveHealthPoolFromPlayer(armor_reference);
	RemoveHealthPoolFromPlayer(health_reference);
	RemoveHealthPoolFromPlayer(brig_ult_armor_ref);
	RemoveHealthPoolFromPlayer(armor_pack_ref);
	brig_ult_armor_amount = 0;
	health_reference= AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 51, true, true);
	//define temp_health = 150 - HealthOfType(EventPlayer(), HealthType.Health);
	//workshopHeal(EventPlayer(), null, temp_health);
	//AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, temp_health, true, true);
}

rule: "Dva: Mech Health"
Event.OngoingPlayer
Player.Dva
if (!IsInAlternateForm(EventPlayer()) == true)
{
	Discorder.discord_timer = 3;
	RemoveAllHealthPoolsFromPlayer(EventPlayer());
	Wait(0.033, WaitBehavior.IgnoreCondition);
	SetMaxHealth(EventPlayer(), 66);
	Wait(0.033, WaitBehavior.IgnoreCondition);
	workshopHeal(EventPlayer(), null, 1000);
	define temp_health = 400 - MaxHealthOfType(EventPlayer(), HealthType.Health);
	AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, temp_health, true, true);
	health_reference = LastCreatedHealthPool();
	if (MaxHealthOfType(EventPlayer(), HealthType.Armor) < 200)
	{
		define temp_armor = 200 - MaxHealthOfType(EventPlayer(), HealthType.Armor);
		AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, temp_armor, true, true);
		armor_reference = LastCreatedHealthPool();
	}
}

rule: "Dva: Melee Cancels Boosters"
Event.OngoingPlayer
Player.Dva
if(IsUsingAbility1(EventPlayer()))
if(IsButtonHeld(EventPlayer(),Button.Melee))
{
	PressButton(EventPlayer(),Button.Ability1);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Lucio
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule: "Lucio: Increased Boop Range"
Event.OnDamageDealt
Player.Lucio
if(EventAbility() == Button.SecondaryFire)
{
	Victim().booped = 1;
}

rule: "Lucio: Increase Healing From Others"
Event.OnHealingTaken
Player.Lucio
if(Healer() != EventPlayer())
if(EventAbility() != null)
{
	Heal(Healer(),Healee(),EventHealing()*0.25);  //dont use workshopHeal here
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Moira
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule: "Moira: More Self Heal"
Event.OnDamageDealt
Player.Moira
if(EventAbility() == Button.SecondaryFire)
{
	//increased self heal
	Heal(Attacker(),Attacker(),1.1);  //dont use workshopHeal here
	Wait(1/6);
}
rule:"Moira: Resource"
Event.OngoingPlayer
Player.Moira
{
    define TICK : 5;
	//manually track resource, her meter used to last alot longer but refilled much slower
	if(IsFiringPrimary(EventPlayer()))
	{
		SetHealingDealt(EventPlayer(),114.3);
		moira_resource -= 17/TICK;
	}
	else
	{
		SetHealingDealt(EventPlayer(),100);
		moira_resource += 3.744/TICK;
	}
	SetAbilityResource(EventPlayer(),Button.PrimaryFire,moira_resource);
	//cap resource
	if(moira_resource > 100)
	{
		moira_resource = 100;
	}
	Wait(1/TICK);
	Loop();
}

rule:"Moira: Gain Resource From Damage"
Event.OnDamageDealt
Player.Moira
if(EventAbility() == Button.SecondaryFire)
{
	//moira_resource += 12.15/30;
	moira_resource += 1;
}

rule:"Moira: Cant Fade while ulting"
Event.OngoingPlayer
Player.Moira
if(IsUsingUltimate())
{
	//disable fade until ult is over
	SetAbility1Enabled(EventPlayer(),false);
	WaitUntil(IsUsingUltimate() == false,8);
	SetAbility1Enabled(EventPlayer(),true);
}

rule:"Moira: Cant super jump in Fade"
Event.OngoingPlayer
Player.Moira
if(IsUsingAbility1())
{
	DestroyEffect(anti_nade_effect);
	anti_nade_check = 0;
	SetHealingReceived(EventPlayer(), healing_recieved*100);
	anti_nade_effect = null;

	Discorder.discord_timer = 3;//clear discord
	SetJumpVerticalSpeed(EventPlayer(),50);
	WaitUntil(IsUsingAbility1() == false,10);
	SetJumpVerticalSpeed(EventPlayer(),100);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Rein
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
rule: "Rein: 1 firestrike"
Event.OngoingPlayer
Player.Reinhardt
if(IsUsingAbility2(EventPlayer()))
{
	SetAbility2Enabled(EventPlayer(),false);
	Wait(7);
	SetAbility2Enabled(EventPlayer(),true);
}

rule: "Rein: Movement Speed Penalty"
Event.OngoingPlayer
Player.Reinhardt
if(IsFiringSecondary(EventPlayer()))
{
	
	
	//goal movespeed of 2.75 m/s
	//50%
	SetMoveSpeed(EventPlayer(),75);
	//lower speed when holding shield, wait until its put down
	WaitUntil(IsFiringSecondary() == false,100);
	SetMoveSpeed(EventPlayer(),100);
}

rule: "Rein: Hammer Damage"
Event.OngoingPlayer
Player.Reinhardt
if(IsFiringPrimary())
{
	SetDamageDealt(EventPlayer(),(75/85)*100);
}

rule: "Rein: Firestrike Damage"
Event.OngoingPlayer
Player.Reinhardt
if(IsUsingAbility2())
{
	SetDamageDealt(EventPlayer(),100);
}

rule: "Rein: Pin Damage"
Event.OngoingPlayer
Player.Reinhardt
if(IsUsingAbility1())
{
	SetDamageDealt(EventPlayer(),(300/225)*100);
}

rule: "Rein: Ult Damage"
Event.OngoingPlayer
Player.Reinhardt
if(IsUsingUltimate())
if(IsOnGround())
{
	SetDamageDealt(EventPlayer(),20);
}

rule: "Rein: Raise Outer Ult Damage"
Event.OnDamageDealt
Player.Reinhardt
if(EventAbility() == Button.Ultimate)
if(EventDamage() < 50)
{
	Damage(Victim(),Attacker(),50-EventDamage());
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//winton
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//50% ult charge
//damage set to 90%
rule: "Winston: Primal Range boop range"
Event.OnDamageTaken
if(HeroOf(Attacker()) == Hero.Winston)
if(IsUsingUltimate(Attacker()))
{
	Wait(1/20);
	if(Victim().role == 0)
	{
		ApplyImpulse(Victim(),DirectionTowards(PositionOf(Victim()),PositionOf(Victim())+VelocityOf(Victim())),SpeedOf(Victim())*0.5,Relative.ToWorld,ContraryMotion.Incorporate);
	}
}


rule: "Winston: Primal Rage Health Change"
Event.OngoingPlayer
Player.Winston
if(IsUsingUltimate())
{
	RemoveHealthPoolFromPlayer(health_reference);
	health_reference = AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,1015.38,true,true);
	Wait(1/60);
	workshopHeal(EventPlayer(),null,2000);
	Wait(10);
	RemoveHealthPoolFromPlayer(health_reference);
	health_reference = AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,476.92,true,true);
	//SetMaxHealth(EventPlayer(),100);
	//workshopHeal(EventPlayer(),null,1000);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Zarya
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule: "Zarya: Personal Bubble"
Event.OngoingPlayer
Player.Zarya
if(IsUsingAbility1(EventPlayer()))
{
	SetAbility1Enabled(EventPlayer(),false);
	
    for(zarya_shield_cooldown_1 = 8; zarya_shield_cooldown_1 > 0; zarya_shield_cooldown_1--){
        Wait(1);
    }
	SetAbility1Enabled(EventPlayer(),true);
}

rule: "Zarya: Other Bubble"
Event.OngoingPlayer
Player.Zarya
if(IsUsingAbility2(EventPlayer()))
{
	SetAbility2Enabled(EventPlayer(),false);
    for(zarya_shield_cooldown_2 = 8; zarya_shield_cooldown_2 > 0; zarya_shield_cooldown_2--){
        Wait(1);
    }
	SetAbility2Enabled(EventPlayer(),true);
}

rule: "Zarya: Recieved Bubble"
Event.OngoingPlayer
if(HasStatus(EventPlayer(),Status.Invincible))
{
	Discorder.discord_timer = 3;

	DestroyEffect(anti_nade_effect);
	anti_nade_check = 0;
	SetHealingReceived(EventPlayer(), healing_recieved*100);
	anti_nade_effect = null;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Zenyatta
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule:"Zen: Raise Damage from non kick attack"
Event.OnDamageDealt
Player.Zenyatta
if(EventAbility() == Button.Melee)
{
	workshopHeal(Victim(),null,15);
}

rule: "Shield Health Regen"
Event.OngoingPlayer
Player.Zenyatta
if(current_shield_health < max_shield_health)
{
	time_since_damage_shield += 1/2;
	if(time_since_damage_shield >= 3)
	{
		workshopHeal(EventPlayer(),null,Min(20/6,max_shield_health-current_shield_health));
		current_shield_health += Min(20/6,max_shield_health-current_shield_health);
		if(current_shield_health > max_shield_health)
		{
			current_shield_health = max_shield_health;
		}
		time_since_damage_shield = 3-(1/2);
	}
	Wait(1/2);
	LoopIfConditionIsTrue();
}

rule: "Shield Timer Reset"
Event.OnDamageTaken
Player.Zenyatta
if(Attacker() != null)
{
	time_since_damage_shield = 0;
	current_shield_health = HealthOfType(EventPlayer(),HealthType.Shields);
}

rule: "Zen: Decreased Boop Range"
Event.OnDamageTaken
if(HeroOf(Attacker()) == Hero.Zenyatta)
if(EventAbility() == Button.Melee)
{
	Wait(1/20);
	ApplyImpulse(Victim(),DirectionTowards(PositionOf(Victim()),PositionOf(Victim())+VelocityOf(Victim()))*Vector(-1,0,-1),SpeedOf(Victim())*0.9,Relative.ToWorld,ContraryMotion.Incorporate);
}

// rule: "Zen: Discord Applied"
// Event.OngoingPlayer
// Player.Zenyatta
// if(IsUsingAbility2())
// {

// 	//clear old discord
// 	DiscordTarget.Discorder = null;
// 	DiscordTarget.dam_modify[0] = 0;
// 	sum_array_damage(DiscordTarget);
// 	SetDamageReceived(DiscordTarget,DiscordTarget.damage_taken);
// 	DestroyEffect(DiscordTarget.zen_discord_reference);
// 	DiscordTarget = null;
	
// 	define zen_los = AllLivingPlayers(OppositeTeamOf(TeamOf(EventPlayer())));
// 	zen_los = FilteredArray(zen_los,IsInLineOfSight(EventPlayer(),ArrayElement(),BarrierLOS.NoBarriersBlock));
// 	for(define i = 0; i < 6; i++)
// 	{
// 		Damage(zen_los[i],EventPlayer(),(0.1 / zen_los[i].damage_float));
// 	}
// }

// rule: "Zen: Discord Damage"
// Event.OnDamageDealt
// Player.Zenyatta
// if(EventDamage() < 1)
// {	
// 	workshopHeal(Victim(),null,EventDamage()/Victim().healing_recieved);
// 	if((EventDamage() > 0.07 && EventDamage() < 0.095) || EventDamage() > 0.105)
// 	{
// 		DiscordTarget = Victim();
// 		DiscordTarget.Discorder = Attacker();
// 		DiscordTarget.dam_modify[0] = 3;
// 		sum_array_damage(DiscordTarget);
// 		SetDamageReceived(DiscordTarget,DiscordTarget.damage_taken);
// 		DiscordTarget.zen_discord_reference = CreateEffect(AllPlayers(),Effect.BadAura,Color.Purple,Victim(),Victim().effect_scale/2,EffectRev.PositionAndRadius);
// 	}
// }


// rule: "Zen: Discord timer"
// Event.OngoingPlayer
// Player.Zenyatta
// if(DiscordTarget != null)
// {
// 	if(discord_timer < 3)
// 	{
// 		if(IsInLineOfSight(EventPlayer(),DiscordTarget,BarrierLOS.NoBarriersBlock))
// 		{
// 			discord_timer = 0;
// 		}
// 		else
// 		{
// 			discord_timer += 1/4;
// 		}
// 	}


//     if(discord_timer >= 3)
//     {
// 		DiscordTarget.Discorder = null;
//         DiscordTarget.dam_modify[0] = 0;
//         sum_array_damage(DiscordTarget);
//         SetDamageReceived(DiscordTarget,DiscordTarget.damage_taken);
//         DestroyEffect(DiscordTarget.zen_discord_reference);
//         DiscordTarget = null;
//         discord_timer = 0;
//     }
//     else if (discord_timer >= 2)
//     {
//         DiscordTarget.dam_modify[0] = 30;
//         sum_array_damage(DiscordTarget);
//         SetDamageReceived(DiscordTarget,DiscordTarget.damage_taken);
//     }
//     Wait(1/4);
//     LoopIfConditionIsTrue();
// }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Light Weight Scrim Code
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule: "Round 1 Over"
Event.OngoingGlobal
if(scrim_mode == true)
if(CurrentGameMode() != GameMode.Control)
if(IsBetweenRounds())
if(IsTeamOnOffense(Team.Team2))
if(scrim_mode_state == 0)
{
    SetTeamScore(Team.Team2,3);
    scrim_mode_state = 1;
}
rule: "Round 2 Start"
Event.OngoingGlobal
if(scrim_mode == true)
if(CurrentGameMode() != GameMode.Control)
if(IsBetweenRounds() == false)
if(scrim_mode_state == 1)
{
    scrim_mode_state = 2;
}
rule: "Round 2 Over"
Event.OngoingGlobal
if(scrim_mode == true)
if(CurrentGameMode() != GameMode.Control)
if(IsBetweenRounds())
if(scrim_mode_state == 2)
{
    SetTeamScore(Team.Team2,3);
    DeclareMatchDraw();
}

rule: "Reduce Select Hero"
Event.OngoingGlobal
if(scrim_mode == true)
if(IsAssemblingHeroes())
{
    SetMatchTime(10);
}

rule: "Control Score Count"
Event.OngoingGlobal
if(scrim_mode == true)
if(CurrentGameMode() == GameMode.Control)
if(IsBetweenRounds())
{
    scrim_mode_state += 1;
	SetTeamScore(Team.Team1,0);
	SetTeamScore(Team.Team2,0);
}

rule:"Control Declare Draw"
Event.OngoingGlobal
if(scrim_mode == true)
if(CurrentGameMode() == GameMode.Control)
if(scrim_mode_state == 3)
{
    DeclareMatchDraw();
}